{"ast":null,"code":"import Cookies from 'universal-cookie';\nconst cookies = new Cookies();\n\n// إعدادات الكوكيز الافتراضية\nconst defaultOptions = {\n  path: '/',\n  secure: false,\n  // اجعلها false\n  sameSite: 'lax'\n};\n\n// إدارة التوكنز\nexport const tokenManager = {\n  // تخزين access token\n  setAccessToken: token => {\n    cookies.set('access_token', token, defaultOptions);\n  },\n  // تخزين refresh token\n  setRefreshToken: token => {\n    cookies.set('refresh_token', token, defaultOptions);\n  },\n  // الحصول على access token\n  getAccessToken: () => {\n    return cookies.get('access_token');\n  },\n  // الحصول على refresh token\n  getRefreshToken: () => {\n    return cookies.get('refresh_token');\n  },\n  // تحديث التوكنز\n  updateTokens: (access, refresh) => {\n    cookies.set('access_token', access, defaultOptions);\n    cookies.set('refresh_token', refresh, defaultOptions);\n  },\n  // حذف التوكنز\n  removeTokens: () => {\n    cookies.remove('access_token', {\n      path: '/'\n    });\n    cookies.remove('refresh_token', {\n      path: '/'\n    });\n  }\n};\n\n// إدارة بيانات المستخدم مع تشفير Base64\nexport const userDataManager = {\n  // تخزين بيانات المستخدم\n  setUserData: userData => {\n    const userInfo = {\n      id: userData.id,\n      first_name: userData.first_name,\n      last_name: userData.last_name,\n      is_superuser: userData.is_superuser,\n      is_active: userData.is_active,\n      role: userData.role\n    };\n    // تشفير Base64\n    const encoded = btoa(JSON.stringify(userInfo));\n    cookies.set('user_data', encoded, defaultOptions);\n  },\n  // الحصول على بيانات المستخدم\n  getUserData: () => {\n    const encoded = cookies.get('user_data');\n    if (!encoded) return null;\n    try {\n      // فك التشفير Base64\n      return JSON.parse(atob(encoded));\n    } catch (e) {\n      return null;\n    }\n  },\n  // حذف بيانات المستخدم\n  removeUserData: () => {\n    cookies.remove('user_data', {\n      path: '/'\n    });\n  }\n};\n\n// إدارة الجلسة الكاملة\nexport const sessionManager = {\n  // حفظ جلسة كاملة\n  saveSession: response => {\n    const {\n      access,\n      refresh,\n      user: userData\n    } = response;\n    tokenManager.setAccessToken(access);\n    tokenManager.setRefreshToken(refresh);\n    userDataManager.setUserData(userData);\n  },\n  // التحقق من وجود جلسة\n  hasSession: () => {\n    const accessToken = tokenManager.getAccessToken();\n    const refreshToken = tokenManager.getRefreshToken();\n    const userData = userDataManager.getUserData();\n    return !!(accessToken && refreshToken && userData);\n  },\n  // حذف الجلسة كاملة\n  clearSession: () => {\n    tokenManager.removeTokens();\n    userDataManager.removeUserData();\n  },\n  // استعادة الجلسة\n  restoreSession: () => {\n    const accessToken = tokenManager.getAccessToken();\n    const refreshToken = tokenManager.getRefreshToken();\n    const userData = userDataManager.getUserData();\n    if (accessToken && refreshToken && userData) {\n      return {\n        accessToken,\n        refreshToken,\n        userData\n      };\n    }\n    return null;\n  }\n};\nexport default cookies;","map":{"version":3,"names":["Cookies","cookies","defaultOptions","path","secure","sameSite","tokenManager","setAccessToken","token","set","setRefreshToken","getAccessToken","get","getRefreshToken","updateTokens","access","refresh","removeTokens","remove","userDataManager","setUserData","userData","userInfo","id","first_name","last_name","is_superuser","is_active","role","encoded","btoa","JSON","stringify","getUserData","parse","atob","e","removeUserData","sessionManager","saveSession","response","user","hasSession","accessToken","refreshToken","clearSession","restoreSession"],"sources":["C:/Users/shaza/Desktop/test for NO/src/Config/cookies.js"],"sourcesContent":["import Cookies from 'universal-cookie';\r\n\r\nconst cookies = new Cookies();\r\n\r\n// إعدادات الكوكيز الافتراضية\r\nconst defaultOptions = {\r\n  path: '/',\r\n  secure: false, // اجعلها false\r\n  sameSite: 'lax'\r\n};\r\n\r\n// إدارة التوكنز\r\nexport const tokenManager = {\r\n  // تخزين access token\r\n  setAccessToken: (token) => {\r\n    cookies.set('access_token', token, defaultOptions);\r\n  },\r\n\r\n  // تخزين refresh token\r\n  setRefreshToken: (token) => {\r\n    cookies.set('refresh_token', token, defaultOptions);\r\n  },\r\n\r\n  // الحصول على access token\r\n  getAccessToken: () => {\r\n    return cookies.get('access_token');\r\n  },\r\n\r\n  // الحصول على refresh token\r\n  getRefreshToken: () => {\r\n    return cookies.get('refresh_token');\r\n  },\r\n\r\n  // تحديث التوكنز\r\n  updateTokens: (access, refresh) => {\r\n    cookies.set('access_token', access, defaultOptions);\r\n    cookies.set('refresh_token', refresh, defaultOptions);\r\n  },\r\n\r\n  // حذف التوكنز\r\n  removeTokens: () => {\r\n    cookies.remove('access_token', { path: '/' });\r\n    cookies.remove('refresh_token', { path: '/' });\r\n  }\r\n};\r\n\r\n// إدارة بيانات المستخدم مع تشفير Base64\r\nexport const userDataManager = {\r\n  // تخزين بيانات المستخدم\r\n  setUserData: (userData) => {\r\n    const userInfo = {\r\n      id: userData.id,\r\n      first_name: userData.first_name,\r\n      last_name: userData.last_name,\r\n      is_superuser: userData.is_superuser,\r\n      is_active: userData.is_active,\r\n      role: userData.role\r\n    };\r\n    // تشفير Base64\r\n    const encoded = btoa(JSON.stringify(userInfo));\r\n    cookies.set('user_data', encoded, defaultOptions);\r\n  },\r\n\r\n  // الحصول على بيانات المستخدم\r\n  getUserData: () => {\r\n    const encoded = cookies.get('user_data');\r\n    if (!encoded) return null;\r\n    try {\r\n      // فك التشفير Base64\r\n      return JSON.parse(atob(encoded));\r\n    } catch (e) {\r\n      return null;\r\n    }\r\n  },\r\n\r\n  // حذف بيانات المستخدم\r\n  removeUserData: () => {\r\n    cookies.remove('user_data', { path: '/' });\r\n  }\r\n};\r\n\r\n// إدارة الجلسة الكاملة\r\nexport const sessionManager = {\r\n  // حفظ جلسة كاملة\r\n  saveSession: (response) => {\r\n    const { access, refresh, user: userData } = response;\r\n    \r\n    tokenManager.setAccessToken(access);\r\n    tokenManager.setRefreshToken(refresh);\r\n    userDataManager.setUserData(userData);\r\n  },\r\n\r\n  // التحقق من وجود جلسة\r\n  hasSession: () => {\r\n    const accessToken = tokenManager.getAccessToken();\r\n    const refreshToken = tokenManager.getRefreshToken();\r\n    const userData = userDataManager.getUserData();\r\n    return !!(accessToken && refreshToken && userData);\r\n  },\r\n\r\n  // حذف الجلسة كاملة\r\n  clearSession: () => {\r\n    tokenManager.removeTokens();\r\n    userDataManager.removeUserData();\r\n  },\r\n\r\n  // استعادة الجلسة\r\n  restoreSession: () => {\r\n    const accessToken = tokenManager.getAccessToken();\r\n    const refreshToken = tokenManager.getRefreshToken();\r\n    const userData = userDataManager.getUserData();\r\n    \r\n    if (accessToken && refreshToken && userData) {\r\n      return {\r\n        accessToken,\r\n        refreshToken,\r\n        userData\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default cookies; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}