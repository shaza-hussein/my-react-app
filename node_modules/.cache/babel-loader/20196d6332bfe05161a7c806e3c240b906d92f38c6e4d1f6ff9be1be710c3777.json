{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useMemo, useCallback } from 'react';\n\n// Hook to manage filters, search, ordering, and pagination for users list\nexport default function useFilters() {\n  _s();\n  const [selectedFilter, setSelectedFilter] = useState('all');\n  const [nameFilter, setNameFilter] = useState('');\n  const [phoneFilter, setPhoneFilter] = useState('');\n  const [search, setSearch] = useState('');\n  const [page, setPage] = useState(1);\n  const [ordering, setOrdering] = useState('-created_at');\n\n  // Applied values: only sent to API upon explicit apply\n  const [appliedSearch, setAppliedSearch] = useState('');\n  const [appliedName, setAppliedName] = useState('');\n  const [appliedPhone, setAppliedPhone] = useState('');\n\n  // Sorting handler\n  const handleSort = useCallback((field, direction = 'asc') => {\n    if (direction === 'asc') {\n      setOrdering(field);\n    } else {\n      setOrdering(`-${field}`);\n    }\n  }, []);\n\n  // Apply filters/search explicitly (button/Enter)\n  const handleApplyFilters = useCallback(() => {\n    setAppliedSearch(search.trim());\n    setAppliedName(nameFilter.trim());\n    setAppliedPhone(phoneFilter.trim());\n    setPage(1);\n  }, [search, nameFilter, phoneFilter]);\n  const handleKeyDownApply = useCallback(e => {\n    if (e.key === 'Enter') {\n      handleApplyFilters();\n    }\n  }, [handleApplyFilters]);\n\n  // Input change handlers that reset applied values when cleared\n  const handleSearchChange = useCallback(e => {\n    const val = e.target.value;\n    setSearch(val);\n    if (val.trim() === '' && appliedSearch !== '') {\n      setAppliedSearch('');\n      setPage(1);\n    }\n  }, [appliedSearch]);\n  const handleNameChange = useCallback(e => {\n    const val = e.target.value;\n    setNameFilter(val);\n    if (val.trim() === '' && appliedName !== '') {\n      setAppliedName('');\n      setPage(1);\n    }\n  }, [appliedName]);\n  const handlePhoneChange = useCallback(e => {\n    const val = e.target.value;\n    setPhoneFilter(val);\n    if (val.trim() === '' && appliedPhone !== '') {\n      setAppliedPhone('');\n      setPage(1);\n    }\n  }, [appliedPhone]);\n\n  // Memoized query params to avoid unnecessary fetches\n  const queryParams = useMemo(() => ({\n    page,\n    search: appliedSearch || undefined,\n    name: appliedName || undefined,\n    phone: appliedPhone || undefined,\n    is_active: selectedFilter === 'active' ? true : selectedFilter === 'inactive' ? false : undefined,\n    role: selectedFilter === 'super_admin' || selectedFilter === 'merchant' ? selectedFilter : undefined,\n    ordering\n  }), [page, appliedSearch, appliedName, appliedPhone, selectedFilter, ordering]);\n  return {\n    // state\n    selectedFilter,\n    nameFilter,\n    phoneFilter,\n    search,\n    page,\n    ordering,\n    appliedSearch,\n    appliedName,\n    appliedPhone,\n    // setters\n    setSelectedFilter,\n    setNameFilter,\n    setPhoneFilter,\n    setSearch,\n    setPage,\n    // handlers\n    handleSort,\n    handleApplyFilters,\n    handleKeyDownApply,\n    handleSearchChange,\n    handleNameChange,\n    handlePhoneChange,\n    // derived\n    queryParams\n  };\n}\n_s(useFilters, \"3sHx0BBFp/wv9wTFxrLepJrscNY=\");","map":{"version":3,"names":["useState","useMemo","useCallback","useFilters","_s","selectedFilter","setSelectedFilter","nameFilter","setNameFilter","phoneFilter","setPhoneFilter","search","setSearch","page","setPage","ordering","setOrdering","appliedSearch","setAppliedSearch","appliedName","setAppliedName","appliedPhone","setAppliedPhone","handleSort","field","direction","handleApplyFilters","trim","handleKeyDownApply","e","key","handleSearchChange","val","target","value","handleNameChange","handlePhoneChange","queryParams","undefined","name","phone","is_active","role"],"sources":["C:/Users/shaza/Desktop/test for NO/src/Hooks/useFilters.js"],"sourcesContent":["import { useState, useMemo, useCallback } from 'react';\r\n\r\n// Hook to manage filters, search, ordering, and pagination for users list\r\nexport default function useFilters() {\r\n  const [selectedFilter, setSelectedFilter] = useState('all');\r\n  const [nameFilter, setNameFilter] = useState('');\r\n  const [phoneFilter, setPhoneFilter] = useState('');\r\n  const [search, setSearch] = useState('');\r\n  const [page, setPage] = useState(1);\r\n  const [ordering, setOrdering] = useState('-created_at');\r\n\r\n  // Applied values: only sent to API upon explicit apply\r\n  const [appliedSearch, setAppliedSearch] = useState('');\r\n  const [appliedName, setAppliedName] = useState('');\r\n  const [appliedPhone, setAppliedPhone] = useState('');\r\n\r\n  // Sorting handler\r\n  const handleSort = useCallback((field, direction = 'asc') => {\r\n    if (direction === 'asc') {\r\n      setOrdering(field);\r\n    } else {\r\n      setOrdering(`-${field}`);\r\n    }\r\n  }, []);\r\n\r\n  // Apply filters/search explicitly (button/Enter)\r\n  const handleApplyFilters = useCallback(() => {\r\n    setAppliedSearch(search.trim());\r\n    setAppliedName(nameFilter.trim());\r\n    setAppliedPhone(phoneFilter.trim());\r\n    setPage(1);\r\n  }, [search, nameFilter, phoneFilter]);\r\n\r\n  const handleKeyDownApply = useCallback((e) => {\r\n    if (e.key === 'Enter') {\r\n      handleApplyFilters();\r\n    }\r\n  }, [handleApplyFilters]);\r\n\r\n  // Input change handlers that reset applied values when cleared\r\n  const handleSearchChange = useCallback((e) => {\r\n    const val = e.target.value;\r\n    setSearch(val);\r\n    if (val.trim() === '' && appliedSearch !== '') {\r\n      setAppliedSearch('');\r\n      setPage(1);\r\n    }\r\n  }, [appliedSearch]);\r\n\r\n  const handleNameChange = useCallback((e) => {\r\n    const val = e.target.value;\r\n    setNameFilter(val);\r\n    if (val.trim() === '' && appliedName !== '') {\r\n      setAppliedName('');\r\n      setPage(1);\r\n    }\r\n  }, [appliedName]);\r\n\r\n  const handlePhoneChange = useCallback((e) => {\r\n    const val = e.target.value;\r\n    setPhoneFilter(val);\r\n    if (val.trim() === '' && appliedPhone !== '') {\r\n      setAppliedPhone('');\r\n      setPage(1);\r\n    }\r\n  }, [appliedPhone]);\r\n\r\n  // Memoized query params to avoid unnecessary fetches\r\n  const queryParams = useMemo(() => ({\r\n    page,\r\n    search: appliedSearch || undefined,\r\n    name: appliedName || undefined,\r\n    phone: appliedPhone || undefined,\r\n    is_active: selectedFilter === 'active' ? true : selectedFilter === 'inactive' ? false : undefined,\r\n    role: (selectedFilter === 'super_admin' || selectedFilter === 'merchant') ? selectedFilter : undefined,\r\n    ordering,\r\n  }), [page, appliedSearch, appliedName, appliedPhone, selectedFilter, ordering]);\r\n\r\n  return {\r\n    // state\r\n    selectedFilter,\r\n    nameFilter,\r\n    phoneFilter,\r\n    search,\r\n    page,\r\n    ordering,\r\n    appliedSearch,\r\n    appliedName,\r\n    appliedPhone,\r\n\r\n    // setters\r\n    setSelectedFilter,\r\n    setNameFilter,\r\n    setPhoneFilter,\r\n    setSearch,\r\n    setPage,\r\n\r\n    // handlers\r\n    handleSort,\r\n    handleApplyFilters,\r\n    handleKeyDownApply,\r\n    handleSearchChange,\r\n    handleNameChange,\r\n    handlePhoneChange,\r\n\r\n    // derived\r\n    queryParams,\r\n  };\r\n}\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}