{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shaza\\\\Desktop\\\\test for NO\\\\src\\\\Context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { sessionManager } from '../Config/cookies';\nimport { logoutUser } from '../API';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // التحقق من وجود توكن عند تحميل التطبيق\n  useEffect(() => {\n    const session = sessionManager.restoreSession();\n    if (session) {\n      console.log('✅ تم استعادة الجلسة:', session);\n      setUser(session.userData);\n      setIsAuthenticated(true);\n    } else {\n      console.log('❌ لا توجد جلسة محفوظة');\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n    setIsLoading(false);\n  }, []);\n\n  // الاستماع لحدث انتهاء الجلسة\n  useEffect(() => {\n    const handleSessionExpired = () => {\n      console.log('🔄 استقبال حدث انتهاء الجلسة');\n\n      // حذف الجلسة من الكوكيز\n      sessionManager.clearSession();\n\n      // إعادة تعيين الحالة\n      setUser(null);\n      setIsAuthenticated(false);\n\n      // التوجيه إلى صفحة تسجيل الدخول\n      window.location.href = '/login';\n    };\n    window.addEventListener('sessionExpired', handleSessionExpired);\n    return () => {\n      window.removeEventListener('sessionExpired', handleSessionExpired);\n    };\n  }, []);\n\n  // تسجيل الدخول\n  const login = response => {\n    console.log('🔄 بدء تسجيل الدخول:', response);\n\n    // حفظ الجلسة في الكوكيز\n    sessionManager.saveSession(response);\n\n    // استخراج بيانات المستخدم للـ Context\n    const userInfo = {\n      id: response.user.id,\n      first_name: response.user.first_name,\n      last_name: response.user.last_name,\n      is_active: response.user.is_active,\n      role: response.user.role\n    };\n    console.log('✅ تم حفظ الجلسة بنجاح:', {\n      userInfo,\n      hasSession: sessionManager.hasSession()\n    });\n\n    // تحديث حالة التطبيق\n    setUser(userInfo);\n    setIsAuthenticated(true);\n  };\n\n  // تسجيل الخروج\n  const logout = async () => {\n    console.log('🔄 بدء تسجيل الخروج');\n    try {\n      // إرسال طلب تسجيل الخروج للخادم\n      await logoutUser();\n      console.log('✅ تم تسجيل الخروج من الخادم');\n    } catch (error) {\n      var _error$response;\n      console.log('⚠️ فشل تسجيل الخروج من الخادم:', error);\n\n      // إذا كان الخطأ 401، فهذا يعني أن التوكن منتهي الصلاحية\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        console.log('🔑 التوكن منتهي الصلاحية، سيتم حذف الجلسة المحلية فقط');\n      } else {\n        console.log('❌ خطأ آخر في تسجيل الخروج:', error.message);\n      }\n      // نستمر في حذف الجلسة المحلية حتى لو فشل الطلب\n    }\n\n    // حذف الجلسة من الكوكيز (في جميع الحالات)\n    sessionManager.clearSession();\n    console.log('✅ تم حذف الجلسة المحلية بنجاح');\n\n    // إعادة تعيين الحالة\n    setUser(null);\n    setIsAuthenticated(false);\n\n    // التوجيه إلى صفحة تسجيل الدخول\n    window.location.href = '/login';\n  };\n\n  // تنظيف الجلسة (لحل المشاكل)\n  const clearSession = async () => {\n    console.log('🧹 تنظيف الجلسة');\n    try {\n      // محاولة تسجيل الخروج من الخادم\n      await logoutUser();\n      console.log('✅ تم تسجيل الخروج من الخادم');\n    } catch (error) {\n      console.log('⚠️ فشل تسجيل الخروج من الخادم:', error);\n      // نستمر في حذف الجلسة المحلية حتى لو فشل الطلب\n    }\n\n    // حذف الجلسة من الكوكيز\n    sessionManager.clearSession();\n    setUser(null);\n    setIsAuthenticated(false);\n\n    // التوجيه إلى صفحة تسجيل الدخول\n    window.location.href = '/login';\n  };\n\n  // الحصول على التوكن الحالي\n  const getAccessToken = () => {\n    var _sessionManager$resto;\n    const token = (_sessionManager$resto = sessionManager.restoreSession()) === null || _sessionManager$resto === void 0 ? void 0 : _sessionManager$resto.accessToken;\n    console.log('🔑 Access Token:', token ? 'موجود' : 'غير موجود');\n    return token;\n  };\n\n  // الحصول على refresh token\n  const getRefreshToken = () => {\n    var _sessionManager$resto2;\n    const token = (_sessionManager$resto2 = sessionManager.restoreSession()) === null || _sessionManager$resto2 === void 0 ? void 0 : _sessionManager$resto2.refreshToken;\n    console.log('🔄 Refresh Token:', token ? 'موجود' : 'غير موجود');\n    return token;\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    isLoading,\n    login,\n    logout,\n    clearSession,\n    getAccessToken,\n    getRefreshToken\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"qzV4SHsOsLlYp8SpLeogqS2VRgM=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","sessionManager","logoutUser","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","session","restoreSession","console","log","userData","handleSessionExpired","clearSession","window","location","href","addEventListener","removeEventListener","login","response","saveSession","userInfo","id","first_name","last_name","is_active","role","hasSession","logout","error","_error$response","status","message","getAccessToken","_sessionManager$resto","token","accessToken","getRefreshToken","_sessionManager$resto2","refreshToken","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shaza/Desktop/test for NO/src/Context/AuthContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\r\nimport { sessionManager } from '../Config/cookies';\r\nimport { logoutUser } from '../API';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // التحقق من وجود توكن عند تحميل التطبيق\r\n  useEffect(() => {\r\n    const session = sessionManager.restoreSession();\r\n    \r\n    if (session) {\r\n      console.log('✅ تم استعادة الجلسة:', session);\r\n      setUser(session.userData);\r\n      setIsAuthenticated(true);\r\n    } else {\r\n      console.log('❌ لا توجد جلسة محفوظة');\r\n      setUser(null);\r\n      setIsAuthenticated(false);\r\n    }\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  // الاستماع لحدث انتهاء الجلسة\r\n  useEffect(() => {\r\n    const handleSessionExpired = () => {\r\n      console.log('🔄 استقبال حدث انتهاء الجلسة');\r\n      \r\n      // حذف الجلسة من الكوكيز\r\n      sessionManager.clearSession();\r\n      \r\n      // إعادة تعيين الحالة\r\n      setUser(null);\r\n      setIsAuthenticated(false);\r\n      \r\n      // التوجيه إلى صفحة تسجيل الدخول\r\n      window.location.href = '/login';\r\n    };\r\n\r\n    window.addEventListener('sessionExpired', handleSessionExpired);\r\n\r\n    return () => {\r\n      window.removeEventListener('sessionExpired', handleSessionExpired);\r\n    };\r\n  }, []);\r\n\r\n  // تسجيل الدخول\r\n  const login = (response) => {\r\n    console.log('🔄 بدء تسجيل الدخول:', response);\r\n    \r\n    // حفظ الجلسة في الكوكيز\r\n    sessionManager.saveSession(response);\r\n    \r\n    // استخراج بيانات المستخدم للـ Context\r\n    const userInfo = {\r\n      id: response.user.id,\r\n      first_name: response.user.first_name,\r\n      last_name: response.user.last_name,\r\n      is_active: response.user.is_active,\r\n      role: response.user.role\r\n    };\r\n\r\n    console.log('✅ تم حفظ الجلسة بنجاح:', {\r\n      userInfo,\r\n      hasSession: sessionManager.hasSession()\r\n    });\r\n\r\n    // تحديث حالة التطبيق\r\n    setUser(userInfo);\r\n    setIsAuthenticated(true);\r\n  };\r\n\r\n  // تسجيل الخروج\r\n  const logout = async () => {\r\n    console.log('🔄 بدء تسجيل الخروج');\r\n    \r\n    try {\r\n      // إرسال طلب تسجيل الخروج للخادم\r\n      await logoutUser();\r\n      console.log('✅ تم تسجيل الخروج من الخادم');\r\n    } catch (error) {\r\n      console.log('⚠️ فشل تسجيل الخروج من الخادم:', error);\r\n      \r\n      // إذا كان الخطأ 401، فهذا يعني أن التوكن منتهي الصلاحية\r\n      if (error.response?.status === 401) {\r\n        console.log('🔑 التوكن منتهي الصلاحية، سيتم حذف الجلسة المحلية فقط');\r\n      } else {\r\n        console.log('❌ خطأ آخر في تسجيل الخروج:', error.message);\r\n      }\r\n      // نستمر في حذف الجلسة المحلية حتى لو فشل الطلب\r\n    }\r\n    \r\n    // حذف الجلسة من الكوكيز (في جميع الحالات)\r\n    sessionManager.clearSession();\r\n    \r\n    console.log('✅ تم حذف الجلسة المحلية بنجاح');\r\n    \r\n    // إعادة تعيين الحالة\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n    \r\n    // التوجيه إلى صفحة تسجيل الدخول\r\n    window.location.href = '/login';\r\n  };\r\n\r\n  // تنظيف الجلسة (لحل المشاكل)\r\n  const clearSession = async () => {\r\n    console.log('🧹 تنظيف الجلسة');\r\n    \r\n    try {\r\n      // محاولة تسجيل الخروج من الخادم\r\n      await logoutUser();\r\n      console.log('✅ تم تسجيل الخروج من الخادم');\r\n    } catch (error) {\r\n      console.log('⚠️ فشل تسجيل الخروج من الخادم:', error);\r\n      // نستمر في حذف الجلسة المحلية حتى لو فشل الطلب\r\n    }\r\n    \r\n    // حذف الجلسة من الكوكيز\r\n    sessionManager.clearSession();\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n    \r\n    // التوجيه إلى صفحة تسجيل الدخول\r\n    window.location.href = '/login';\r\n  };\r\n\r\n  // الحصول على التوكن الحالي\r\n  const getAccessToken = () => {\r\n    const token = sessionManager.restoreSession()?.accessToken;\r\n    console.log('🔑 Access Token:', token ? 'موجود' : 'غير موجود');\r\n    return token;\r\n  };\r\n\r\n  // الحصول على refresh token\r\n  const getRefreshToken = () => {\r\n    const token = sessionManager.restoreSession()?.refreshToken;\r\n    console.log('🔄 Refresh Token:', token ? 'موجود' : 'غير موجود');\r\n    return token;\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    isAuthenticated,\r\n    isLoading,\r\n    login,\r\n    logout,\r\n    clearSession,\r\n    getAccessToken,\r\n    getRefreshToken\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}