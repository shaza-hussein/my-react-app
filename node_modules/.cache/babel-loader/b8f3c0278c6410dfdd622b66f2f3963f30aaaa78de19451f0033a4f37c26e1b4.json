{"ast":null,"code":"// import { createContext, useContext, useState, useEffect } from 'react';\n// import { sessionManager } from '../Config/cookies';\n// import { logoutUser } from '../API';\n\n// const AuthContext = createContext();\n\n// export const useAuth = () => {\n//   const context = useContext(AuthContext);\n//   if (!context) {\n//     throw new Error('useAuth must be used within an AuthProvider');\n//   }\n//   return context;\n// };\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n//   // التحقق من وجود توكن عند تحميل التطبيق\n//   useEffect(() => {\n//     const session = sessionManager.restoreSession();\n\n//     if (session) {\n//       console.log('✅ تم استعادة الجلسة:', session);\n//       setUser(session.userData);\n//       setIsAuthenticated(true);\n//     } else {\n//       console.log('❌ لا توجد جلسة محفوظة');\n//     }\n//   }, []);\n\n//   // الاستماع لحدث انتهاء الجلسة\n//   useEffect(() => {\n//     const handleSessionExpired = () => {\n//       console.log('🔄 استقبال حدث انتهاء الجلسة');\n\n//       // حذف الجلسة من الكوكيز\n//       sessionManager.clearSession();\n\n//       // إعادة تعيين الحالة\n//       setUser(null);\n//       setIsAuthenticated(false);\n\n//       // التوجيه إلى صفحة تسجيل الدخول\n//       window.location.href = '/login';\n//     };\n\n//     window.addEventListener('sessionExpired', handleSessionExpired);\n\n//     return () => {\n//       window.removeEventListener('sessionExpired', handleSessionExpired);\n//     };\n//   }, []);\n\n//   // تسجيل الدخول\n//   const login = (response) => {\n//     console.log('🔄 بدء تسجيل الدخول:', response);\n\n//     // حفظ الجلسة في الكوكيز\n//     sessionManager.saveSession(response);\n\n//     // استخراج بيانات المستخدم للـ Context\n//     const userInfo = {\n//       id: response.user.id,\n//       first_name: response.user.first_name,\n//       last_name: response.user.last_name,\n//       is_active: response.user.is_active,\n//       role: response.user.role\n//     };\n\n//     console.log('✅ تم حفظ الجلسة بنجاح:', {\n//       userInfo,\n//       hasSession: sessionManager.hasSession()\n//     });\n\n//     // تحديث حالة التطبيق\n//     setUser(userInfo);\n//     setIsAuthenticated(true);\n//   };\n\n//   // تسجيل الخروج\n//   const logout = async () => {\n//     console.log('🔄 بدء تسجيل الخروج');\n\n//     try {\n//       // إرسال طلب تسجيل الخروج للخادم\n//       await logoutUser();\n//       console.log('✅ تم تسجيل الخروج من الخادم');\n//     } catch (error) {\n//       console.log('⚠️ فشل تسجيل الخروج من الخادم:', error);\n\n//       // إذا كان الخطأ 401، فهذا يعني أن التوكن منتهي الصلاحية\n//       if (error.response?.status === 401) {\n//         console.log('🔑 التوكن منتهي الصلاحية، سيتم حذف الجلسة المحلية فقط');\n//       } else {\n//         console.log('❌ خطأ آخر في تسجيل الخروج:', error.message);\n//       }\n//       // نستمر في حذف الجلسة المحلية حتى لو فشل الطلب\n//     }\n\n//     // حذف الجلسة من الكوكيز (في جميع الحالات)\n//     sessionManager.clearSession();\n\n//     console.log('✅ تم حذف الجلسة المحلية بنجاح');\n\n//     // إعادة تعيين الحالة\n//     setUser(null);\n//     setIsAuthenticated(false);\n\n//     // التوجيه إلى صفحة تسجيل الدخول\n//     window.location.href = '/login';\n//   };\n\n//   // تنظيف الجلسة (لحل المشاكل)\n//   const clearSession = async () => {\n//     console.log('🧹 تنظيف الجلسة');\n\n//     try {\n//       // محاولة تسجيل الخروج من الخادم\n//       await logoutUser();\n//       console.log('✅ تم تسجيل الخروج من الخادم');\n//     } catch (error) {\n//       console.log('⚠️ فشل تسجيل الخروج من الخادم:', error);\n//       // نستمر في حذف الجلسة المحلية حتى لو فشل الطلب\n//     }\n\n//     // حذف الجلسة من الكوكيز\n//     sessionManager.clearSession();\n//     setUser(null);\n//     setIsAuthenticated(false);\n\n//     // التوجيه إلى صفحة تسجيل الدخول\n//     window.location.href = '/login';\n//   };\n\n//   // الحصول على التوكن الحالي\n//   const getAccessToken = () => {\n//     const token = sessionManager.restoreSession()?.accessToken;\n//     console.log('🔑 Access Token:', token ? 'موجود' : 'غير موجود');\n//     return token;\n//   };\n\n//   // الحصول على refresh token\n//   const getRefreshToken = () => {\n//     const token = sessionManager.restoreSession()?.refreshToken;\n//     console.log('🔄 Refresh Token:', token ? 'موجود' : 'غير موجود');\n//     return token;\n//   };\n\n//   const value = {\n//     user,\n//     isAuthenticated,\n//     login,\n//     logout,\n//     clearSession,\n//     getAccessToken,\n//     getRefreshToken\n//   };\n\n//   return (\n//     <AuthContext.Provider value={value}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };","map":{"version":3,"names":[],"sources":["C:/Users/shaza/Desktop/test for NO/src/Context/AuthContext.js"],"sourcesContent":["// import { createContext, useContext, useState, useEffect } from 'react';\n// import { sessionManager } from '../Config/cookies';\n// import { logoutUser } from '../API';\n\n// const AuthContext = createContext();\n\n// export const useAuth = () => {\n//   const context = useContext(AuthContext);\n//   if (!context) {\n//     throw new Error('useAuth must be used within an AuthProvider');\n//   }\n//   return context;\n// };\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n//   // التحقق من وجود توكن عند تحميل التطبيق\n//   useEffect(() => {\n//     const session = sessionManager.restoreSession();\n    \n//     if (session) {\n//       console.log('✅ تم استعادة الجلسة:', session);\n//       setUser(session.userData);\n//       setIsAuthenticated(true);\n//     } else {\n//       console.log('❌ لا توجد جلسة محفوظة');\n//     }\n//   }, []);\n\n//   // الاستماع لحدث انتهاء الجلسة\n//   useEffect(() => {\n//     const handleSessionExpired = () => {\n//       console.log('🔄 استقبال حدث انتهاء الجلسة');\n      \n//       // حذف الجلسة من الكوكيز\n//       sessionManager.clearSession();\n      \n//       // إعادة تعيين الحالة\n//       setUser(null);\n//       setIsAuthenticated(false);\n      \n//       // التوجيه إلى صفحة تسجيل الدخول\n//       window.location.href = '/login';\n//     };\n\n//     window.addEventListener('sessionExpired', handleSessionExpired);\n\n//     return () => {\n//       window.removeEventListener('sessionExpired', handleSessionExpired);\n//     };\n//   }, []);\n\n//   // تسجيل الدخول\n//   const login = (response) => {\n//     console.log('🔄 بدء تسجيل الدخول:', response);\n    \n//     // حفظ الجلسة في الكوكيز\n//     sessionManager.saveSession(response);\n    \n//     // استخراج بيانات المستخدم للـ Context\n//     const userInfo = {\n//       id: response.user.id,\n//       first_name: response.user.first_name,\n//       last_name: response.user.last_name,\n//       is_active: response.user.is_active,\n//       role: response.user.role\n//     };\n\n//     console.log('✅ تم حفظ الجلسة بنجاح:', {\n//       userInfo,\n//       hasSession: sessionManager.hasSession()\n//     });\n\n//     // تحديث حالة التطبيق\n//     setUser(userInfo);\n//     setIsAuthenticated(true);\n//   };\n\n//   // تسجيل الخروج\n//   const logout = async () => {\n//     console.log('🔄 بدء تسجيل الخروج');\n    \n//     try {\n//       // إرسال طلب تسجيل الخروج للخادم\n//       await logoutUser();\n//       console.log('✅ تم تسجيل الخروج من الخادم');\n//     } catch (error) {\n//       console.log('⚠️ فشل تسجيل الخروج من الخادم:', error);\n      \n//       // إذا كان الخطأ 401، فهذا يعني أن التوكن منتهي الصلاحية\n//       if (error.response?.status === 401) {\n//         console.log('🔑 التوكن منتهي الصلاحية، سيتم حذف الجلسة المحلية فقط');\n//       } else {\n//         console.log('❌ خطأ آخر في تسجيل الخروج:', error.message);\n//       }\n//       // نستمر في حذف الجلسة المحلية حتى لو فشل الطلب\n//     }\n    \n//     // حذف الجلسة من الكوكيز (في جميع الحالات)\n//     sessionManager.clearSession();\n    \n//     console.log('✅ تم حذف الجلسة المحلية بنجاح');\n    \n//     // إعادة تعيين الحالة\n//     setUser(null);\n//     setIsAuthenticated(false);\n    \n//     // التوجيه إلى صفحة تسجيل الدخول\n//     window.location.href = '/login';\n//   };\n\n//   // تنظيف الجلسة (لحل المشاكل)\n//   const clearSession = async () => {\n//     console.log('🧹 تنظيف الجلسة');\n    \n//     try {\n//       // محاولة تسجيل الخروج من الخادم\n//       await logoutUser();\n//       console.log('✅ تم تسجيل الخروج من الخادم');\n//     } catch (error) {\n//       console.log('⚠️ فشل تسجيل الخروج من الخادم:', error);\n//       // نستمر في حذف الجلسة المحلية حتى لو فشل الطلب\n//     }\n    \n//     // حذف الجلسة من الكوكيز\n//     sessionManager.clearSession();\n//     setUser(null);\n//     setIsAuthenticated(false);\n    \n//     // التوجيه إلى صفحة تسجيل الدخول\n//     window.location.href = '/login';\n//   };\n\n//   // الحصول على التوكن الحالي\n//   const getAccessToken = () => {\n//     const token = sessionManager.restoreSession()?.accessToken;\n//     console.log('🔑 Access Token:', token ? 'موجود' : 'غير موجود');\n//     return token;\n//   };\n\n//   // الحصول على refresh token\n//   const getRefreshToken = () => {\n//     const token = sessionManager.restoreSession()?.refreshToken;\n//     console.log('🔄 Refresh Token:', token ? 'موجود' : 'غير موجود');\n//     return token;\n//   };\n\n//   const value = {\n//     user,\n//     isAuthenticated,\n//     login,\n//     logout,\n//     clearSession,\n//     getAccessToken,\n//     getRefreshToken\n//   };\n\n//   return (\n//     <AuthContext.Provider value={value}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// }; "],"mappings":"AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}