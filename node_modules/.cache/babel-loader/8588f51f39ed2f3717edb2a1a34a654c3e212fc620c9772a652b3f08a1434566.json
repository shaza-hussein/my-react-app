{"ast":null,"code":"import axios from 'axios';\nimport { tokenManager } from './cookies';\nimport { baseURL } from '../API/Api';\nconst axiosInstance = axios.create({\n  baseURL: baseURL,\n  // عدل هذا العنوان حسب بيئة العمل\n  headers: {\n    'Content-Type': 'application/json'\n    // أضف أي هيدر آخر تحتاجه هنا\n  }\n  // يمكنك إضافة إعدادات أخرى مثل timeout, withCredentials, ...\n});\n\n// إضافة التوكن تلقائياً لكل طلب\naxiosInstance.interceptors.request.use(config => {\n  // قائمة بالـ endpoints التي لا تحتاج توكن\n  const publicEndpoints = ['/auth/login/', '/auth/send-otp/', '/auth/register/', '/auth/register/merchant/', '/auth/register/super-admin/', '/auth/reset-password/'];\n\n  // تحقق إذا كان الطلب يحتاج توكن\n  const needsToken = !publicEndpoints.some(endpoint => {\n    var _config$url;\n    return (_config$url = config.url) === null || _config$url === void 0 ? void 0 : _config$url.includes(endpoint);\n  });\n  if (needsToken) {\n    const token = tokenManager.getAccessToken();\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n      console.log('🔑 إضافة التوكن للطلب:', config.url);\n    } else {\n      console.log('⚠️ لا يوجد توكن للطلب:', config.url);\n    }\n  } else {\n    console.log('🌐 طلب عام بدون توكن:', config.url);\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// معالجة استجابة الطلبات\naxiosInstance.interceptors.response.use(response => {\n  console.log('✅ نجح الطلب:', response.config.url);\n  return response;\n}, async error => {\n  var _error$config, _error$response, _error$response2;\n  console.log('❌ فشل الطلب:', (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url, (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status);\n  const originalRequest = error.config;\n\n  // إذا كان الخطأ 401 ولم نكن قد حاولنا تحديث التوكن من قبل\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const refreshToken = tokenManager.getRefreshToken();\n      if (refreshToken) {\n        // يمكنك إضافة طلب لتحديث التوكن هنا\n        // const response = await refreshTokenAPI(refreshToken);\n        // tokenManager.updateTokens(response.data.access, response.data.refresh);\n        // originalRequest.headers.Authorization = `Bearer ${response.data.access}`;\n        // return axiosInstance(originalRequest);\n      }\n    } catch (refreshError) {\n      // إذا فشل تحديث التوكن، احذف الجلسة وانتقل لصفحة تسجيل الدخول\n      const {\n        sessionManager\n      } = require('./cookies');\n      sessionManager.clearSession();\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","tokenManager","baseURL","axiosInstance","create","headers","interceptors","request","use","config","publicEndpoints","needsToken","some","endpoint","_config$url","url","includes","token","getAccessToken","Authorization","console","log","error","Promise","reject","response","_error$config","_error$response","_error$response2","status","originalRequest","_retry","refreshToken","getRefreshToken","refreshError","sessionManager","require","clearSession","window","location","href"],"sources":["C:/Users/shaza/Desktop/test for NO/src/Config/axios.js"],"sourcesContent":["import axios from 'axios';\r\nimport { tokenManager } from './cookies';\r\nimport {\r\n  baseURL\r\n} from '../API/Api';\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: baseURL, // عدل هذا العنوان حسب بيئة العمل\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    // أضف أي هيدر آخر تحتاجه هنا\r\n  },\r\n  // يمكنك إضافة إعدادات أخرى مثل timeout, withCredentials, ...\r\n});\r\n\r\n// إضافة التوكن تلقائياً لكل طلب\r\naxiosInstance.interceptors.request.use(\r\n  (config) => {\r\n    // قائمة بالـ endpoints التي لا تحتاج توكن\r\n    const publicEndpoints = [\r\n      '/auth/login/',\r\n      '/auth/send-otp/',\r\n      '/auth/register/',\r\n      '/auth/register/merchant/',\r\n      '/auth/register/super-admin/',\r\n      '/auth/reset-password/'\r\n    ];\r\n    \r\n    // تحقق إذا كان الطلب يحتاج توكن\r\n    const needsToken = !publicEndpoints.some(endpoint => \r\n      config.url?.includes(endpoint)\r\n    );\r\n    \r\n    if (needsToken) {\r\n      const token = tokenManager.getAccessToken();\r\n      if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n        console.log('🔑 إضافة التوكن للطلب:', config.url);\r\n      } else {\r\n        console.log('⚠️ لا يوجد توكن للطلب:', config.url);\r\n      }\r\n    } else {\r\n      console.log('🌐 طلب عام بدون توكن:', config.url);\r\n    }\r\n    \r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// معالجة استجابة الطلبات\r\naxiosInstance.interceptors.response.use(\r\n  (response) => {\r\n    console.log('✅ نجح الطلب:', response.config.url);\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    console.log('❌ فشل الطلب:', error.config?.url, error.response?.status);\r\n    \r\n    const originalRequest = error.config;\r\n\r\n    // إذا كان الخطأ 401 ولم نكن قد حاولنا تحديث التوكن من قبل\r\n    if (error.response?.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n\r\n      try {\r\n        const refreshToken = tokenManager.getRefreshToken();\r\n        if (refreshToken) {\r\n          // يمكنك إضافة طلب لتحديث التوكن هنا\r\n          // const response = await refreshTokenAPI(refreshToken);\r\n          // tokenManager.updateTokens(response.data.access, response.data.refresh);\r\n          // originalRequest.headers.Authorization = `Bearer ${response.data.access}`;\r\n          // return axiosInstance(originalRequest);\r\n        }\r\n      } catch (refreshError) {\r\n        // إذا فشل تحديث التوكن، احذف الجلسة وانتقل لصفحة تسجيل الدخول\r\n        const { sessionManager } = require('./cookies');\r\n        sessionManager.clearSession();\r\n        window.location.href = '/login';\r\n      }\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default axiosInstance; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,WAAW;AACxC,SACEC,OAAO,QACF,YAAY;AAEnB,MAAMC,aAAa,GAAGH,KAAK,CAACI,MAAM,CAAC;EACjCF,OAAO,EAAEA,OAAO;EAAE;EAClBG,OAAO,EAAE;IACP,cAAc,EAAE;IAChB;EACF;EACA;AACF,CAAC,CAAC;;AAEF;AACAF,aAAa,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACnCC,MAAM,IAAK;EACV;EACA,MAAMC,eAAe,GAAG,CACtB,cAAc,EACd,iBAAiB,EACjB,iBAAiB,EACjB,0BAA0B,EAC1B,6BAA6B,EAC7B,uBAAuB,CACxB;;EAED;EACA,MAAMC,UAAU,GAAG,CAACD,eAAe,CAACE,IAAI,CAACC,QAAQ;IAAA,IAAAC,WAAA;IAAA,QAAAA,WAAA,GAC/CL,MAAM,CAACM,GAAG,cAAAD,WAAA,uBAAVA,WAAA,CAAYE,QAAQ,CAACH,QAAQ,CAAC;EAAA,CAChC,CAAC;EAED,IAAIF,UAAU,EAAE;IACd,MAAMM,KAAK,GAAGhB,YAAY,CAACiB,cAAc,CAAC,CAAC;IAC3C,IAAID,KAAK,EAAE;MACTR,MAAM,CAACJ,OAAO,CAACc,aAAa,GAAG,UAAUF,KAAK,EAAE;MAChDG,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEZ,MAAM,CAACM,GAAG,CAAC;IACnD,CAAC,MAAM;MACLK,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEZ,MAAM,CAACM,GAAG,CAAC;IACnD;EACF,CAAC,MAAM;IACLK,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEZ,MAAM,CAACM,GAAG,CAAC;EAClD;EAEA,OAAON,MAAM;AACf,CAAC,EACAa,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAnB,aAAa,CAACG,YAAY,CAACmB,QAAQ,CAACjB,GAAG,CACpCiB,QAAQ,IAAK;EACZL,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEI,QAAQ,CAAChB,MAAM,CAACM,GAAG,CAAC;EAChD,OAAOU,QAAQ;AACjB,CAAC,EACD,MAAOH,KAAK,IAAK;EAAA,IAAAI,aAAA,EAAAC,eAAA,EAAAC,gBAAA;EACfR,OAAO,CAACC,GAAG,CAAC,cAAc,GAAAK,aAAA,GAAEJ,KAAK,CAACb,MAAM,cAAAiB,aAAA,uBAAZA,aAAA,CAAcX,GAAG,GAAAY,eAAA,GAAEL,KAAK,CAACG,QAAQ,cAAAE,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,CAAC;EAEtE,MAAMC,eAAe,GAAGR,KAAK,CAACb,MAAM;;EAEpC;EACA,IAAI,EAAAmB,gBAAA,GAAAN,KAAK,CAACG,QAAQ,cAAAG,gBAAA,uBAAdA,gBAAA,CAAgBC,MAAM,MAAK,GAAG,IAAI,CAACC,eAAe,CAACC,MAAM,EAAE;IAC7DD,eAAe,CAACC,MAAM,GAAG,IAAI;IAE7B,IAAI;MACF,MAAMC,YAAY,GAAG/B,YAAY,CAACgC,eAAe,CAAC,CAAC;MACnD,IAAID,YAAY,EAAE;QAChB;QACA;QACA;QACA;QACA;MAAA;IAEJ,CAAC,CAAC,OAAOE,YAAY,EAAE;MACrB;MACA,MAAM;QAAEC;MAAe,CAAC,GAAGC,OAAO,CAAC,WAAW,CAAC;MAC/CD,cAAc,CAACE,YAAY,CAAC,CAAC;MAC7BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IACjC;EACF;EAEA,OAAOjB,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAenB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}