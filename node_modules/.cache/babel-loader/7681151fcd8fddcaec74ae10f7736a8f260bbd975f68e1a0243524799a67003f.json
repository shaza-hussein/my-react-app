{"ast":null,"code":"import { refreshToken } from '../API';\nimport { sessionManager } from '../Config/cookies';\n\n// معالجة أخطاء API وعرض رسائل مناسبة للمستخدم\nexport const handleApiError = error => {\n  var _error$response, _error$response2;\n  console.log('❌ خطأ في API:', error);\n\n  // إذا كان هناك استجابة من الخادم\n  if ((_error$response = error.response) !== null && _error$response !== void 0 && _error$response.data) {\n    const {\n      data\n    } = error.response;\n\n    // إذا كان هناك رسالة خطأ محددة\n    if (data.message) {\n      return data.message;\n    }\n\n    // إذا كان هناك أخطاء في الحقول\n    if (data.errors) {\n      const errorMessages = Object.values(data.errors).flat();\n      return errorMessages.join(', ');\n    }\n\n    // إذا كان هناك تفاصيل\n    if (data.detail) {\n      return data.detail;\n    }\n  }\n\n  // رسائل خطأ حسب رمز الحالة\n  switch ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) {\n    case 400:\n      return 'بيانات غير صحيحة، يرجى التحقق من المدخلات';\n    case 401:\n      return 'غير مصرح لك بالوصول، يرجى تسجيل الدخول مرة أخرى';\n    case 403:\n      return 'ليس لديك صلاحية للوصول لهذا المورد';\n    case 404:\n      return 'المورد المطلوب غير موجود';\n    case 422:\n      return 'بيانات غير صحيحة، يرجى التحقق من المدخلات';\n    case 429:\n      return 'تم تجاوز الحد المسموح من الطلبات، يرجى المحاولة لاحقاً';\n    case 500:\n      return 'خطأ في الخادم، يرجى المحاولة لاحقاً';\n    case 502:\n      return 'خطأ في الاتصال بالخادم، يرجى المحاولة لاحقاً';\n    case 503:\n      return 'الخدمة غير متاحة حالياً، يرجى المحاولة لاحقاً';\n    default:\n      return 'حدث خطأ غير متوقع، يرجى المحاولة مرة أخرى';\n  }\n};\n\n// معالجة خطأ 401 (غير مصرح)\nexport const handleUnauthorizedError = async (error, originalRequest, axiosInstance) => {\n  // إذا لم نكن قد حاولنا تحديث التوكن من قبل\n  if (!originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const session = sessionManager.restoreSession();\n      const refreshTokenValue = session === null || session === void 0 ? void 0 : session.refreshToken;\n      if (refreshTokenValue) {\n        console.log('🔄 محاولة تحديث التوكن...');\n\n        // طلب تحديث التوكن\n        const response = await refreshToken(refreshTokenValue);\n\n        // تحديث التوكنز في الكوكيز\n        sessionManager.saveSession({\n          access: response.access,\n          refresh: response.refresh,\n          user: session.userData\n        });\n\n        // إعادة الطلب الأصلي مع التوكن الجديد\n        originalRequest.headers.Authorization = `Bearer ${response.access}`;\n        console.log('✅ تم تحديث التوكن وإعادة الطلب');\n        return axiosInstance(originalRequest);\n      }\n    } catch (refreshError) {\n      console.log('❌ فشل تحديث التوكن:', refreshError);\n      handleRefreshTokenFailure();\n    }\n  }\n\n  // إذا فشل التحديث أو تمت المحاولة من قبل\n  handleRefreshTokenFailure();\n  return Promise.reject(error);\n};\n\n// معالجة فشل تحديث التوكن\nexport const handleRefreshTokenFailure = () => {\n  console.log('🧹 حذف الجلسة بسبب فشل تحديث التوكن');\n  sessionManager.clearSession();\n\n  // إرسال حدث لحذف الجلسة\n  window.dispatchEvent(new CustomEvent('sessionExpired'));\n};\n\n// معالجة أخطاء عامة\nexport const handleError = error => {\n  var _error$response3;\n  console.log('❌ خطأ في الطلب:', error);\n  if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 401) {\n    handleRefreshTokenFailure();\n  }\n  return Promise.reject(error);\n};\n\n// هذا القديم قبل ما تنقلي مكان الملف من config\n// import { refreshToken } from '../API/Auth';\n// import { tokenManager, sessionManager } from './cookies';\n\n// // معالجة خطأ 401 (غير مصرح)\n// export const handleUnauthorizedError = async (error, originalRequest, axiosInstance) => {\n//   // إذا لم نكن قد حاولنا تحديث التوكن من قبل\n//   if (!originalRequest._retry) {\n//     originalRequest._retry = true;\n\n//     try {\n//       const refreshTokenValue = tokenManager.getRefreshToken();\n//       if (refreshTokenValue) {\n//         console.log('🔄 محاولة تحديث التوكن...');\n\n//         // طلب تحديث التوكن\n//         const response = await refreshToken(refreshTokenValue);\n\n//         // تحديث التوكنز في الكوكيز\n//         tokenManager.updateTokens(response.access, response.refresh);\n\n//         // إعادة الطلب الأصلي مع التوكن الجديد\n//         originalRequest.headers.Authorization = `Bearer ${response.access}`;\n//         console.log('✅ تم تحديث التوكن وإعادة الطلب');\n\n//         return axiosInstance(originalRequest);\n//       }\n//     } catch (refreshError) {\n//       console.log('❌ فشل تحديث التوكن:', refreshError);\n//       handleRefreshTokenFailure();\n//     }\n//   }\n\n//   // إذا فشل التحديث أو تمت المحاولة من قبل\n//   handleRefreshTokenFailure();\n//   return Promise.reject(error);\n// };\n\n// // معالجة فشل تحديث التوكن\n// export const handleRefreshTokenFailure = () => {\n//   console.log('🧹 حذف الجلسة بسبب فشل تحديث التوكن');\n//   sessionManager.clearSession();\n\n//   // إرسال حدث لحذف الجلسة\n//   window.dispatchEvent(new CustomEvent('sessionExpired'));\n// };\n\n// // معالجة أخطاء عامة\n// export const handleError = (error) => {\n//   console.log('❌ خطأ في الطلب:', error);\n\n//   if (error.response?.status === 401) {\n//     handleRefreshTokenFailure();\n//   }\n\n//   return Promise.reject(error);\n// };","map":{"version":3,"names":["refreshToken","sessionManager","handleApiError","error","_error$response","_error$response2","console","log","response","data","message","errors","errorMessages","Object","values","flat","join","detail","status","handleUnauthorizedError","originalRequest","axiosInstance","_retry","session","restoreSession","refreshTokenValue","saveSession","access","refresh","user","userData","headers","Authorization","refreshError","handleRefreshTokenFailure","Promise","reject","clearSession","window","dispatchEvent","CustomEvent","handleError","_error$response3"],"sources":["C:/Users/shaza/Desktop/test for NO/src/Utils/errorHandler.js"],"sourcesContent":["import { refreshToken } from '../API';\r\nimport { sessionManager } from '../Config/cookies';\r\n\r\n// معالجة أخطاء API وعرض رسائل مناسبة للمستخدم\r\nexport const handleApiError = (error) => {\r\n  console.log('❌ خطأ في API:', error);\r\n  \r\n  // إذا كان هناك استجابة من الخادم\r\n  if (error.response?.data) {\r\n    const { data } = error.response;\r\n    \r\n    // إذا كان هناك رسالة خطأ محددة\r\n    if (data.message) {\r\n      return data.message;\r\n    }\r\n    \r\n    // إذا كان هناك أخطاء في الحقول\r\n    if (data.errors) {\r\n      const errorMessages = Object.values(data.errors).flat();\r\n      return errorMessages.join(', ');\r\n    }\r\n    \r\n    // إذا كان هناك تفاصيل\r\n    if (data.detail) {\r\n      return data.detail;\r\n    }\r\n  }\r\n  \r\n  // رسائل خطأ حسب رمز الحالة\r\n  switch (error.response?.status) {\r\n    case 400:\r\n      return 'بيانات غير صحيحة، يرجى التحقق من المدخلات';\r\n    case 401:\r\n      return 'غير مصرح لك بالوصول، يرجى تسجيل الدخول مرة أخرى';\r\n    case 403:\r\n      return 'ليس لديك صلاحية للوصول لهذا المورد';\r\n    case 404:\r\n      return 'المورد المطلوب غير موجود';\r\n    case 422:\r\n      return 'بيانات غير صحيحة، يرجى التحقق من المدخلات';\r\n    case 429:\r\n      return 'تم تجاوز الحد المسموح من الطلبات، يرجى المحاولة لاحقاً';\r\n    case 500:\r\n      return 'خطأ في الخادم، يرجى المحاولة لاحقاً';\r\n    case 502:\r\n      return 'خطأ في الاتصال بالخادم، يرجى المحاولة لاحقاً';\r\n    case 503:\r\n      return 'الخدمة غير متاحة حالياً، يرجى المحاولة لاحقاً';\r\n    default:\r\n      return 'حدث خطأ غير متوقع، يرجى المحاولة مرة أخرى';\r\n  }\r\n};\r\n\r\n// معالجة خطأ 401 (غير مصرح)\r\nexport const handleUnauthorizedError = async (error, originalRequest, axiosInstance) => {\r\n  // إذا لم نكن قد حاولنا تحديث التوكن من قبل\r\n  if (!originalRequest._retry) {\r\n    originalRequest._retry = true;\r\n\r\n    try {\r\n      const session = sessionManager.restoreSession();\r\n      const refreshTokenValue = session?.refreshToken;\r\n      \r\n      if (refreshTokenValue) {\r\n        console.log('🔄 محاولة تحديث التوكن...');\r\n        \r\n        // طلب تحديث التوكن\r\n        const response = await refreshToken(refreshTokenValue);\r\n        \r\n        // تحديث التوكنز في الكوكيز\r\n        sessionManager.saveSession({\r\n          access: response.access,\r\n          refresh: response.refresh,\r\n          user: session.userData\r\n        });\r\n        \r\n        // إعادة الطلب الأصلي مع التوكن الجديد\r\n        originalRequest.headers.Authorization = `Bearer ${response.access}`;\r\n        console.log('✅ تم تحديث التوكن وإعادة الطلب');\r\n        \r\n        return axiosInstance(originalRequest);\r\n      }\r\n    } catch (refreshError) {\r\n      console.log('❌ فشل تحديث التوكن:', refreshError);\r\n      handleRefreshTokenFailure();\r\n    }\r\n  }\r\n\r\n  // إذا فشل التحديث أو تمت المحاولة من قبل\r\n  handleRefreshTokenFailure();\r\n  return Promise.reject(error);\r\n};\r\n\r\n// معالجة فشل تحديث التوكن\r\nexport const handleRefreshTokenFailure = () => {\r\n  console.log('🧹 حذف الجلسة بسبب فشل تحديث التوكن');\r\n  sessionManager.clearSession();\r\n  \r\n  // إرسال حدث لحذف الجلسة\r\n  window.dispatchEvent(new CustomEvent('sessionExpired'));\r\n};\r\n\r\n// معالجة أخطاء عامة\r\nexport const handleError = (error) => {\r\n  console.log('❌ خطأ في الطلب:', error);\r\n  \r\n  if (error.response?.status === 401) {\r\n    handleRefreshTokenFailure();\r\n  }\r\n  \r\n  return Promise.reject(error);\r\n}; \r\n\r\n\r\n// هذا القديم قبل ما تنقلي مكان الملف من config\r\n// import { refreshToken } from '../API/Auth';\r\n// import { tokenManager, sessionManager } from './cookies';\r\n\r\n// // معالجة خطأ 401 (غير مصرح)\r\n// export const handleUnauthorizedError = async (error, originalRequest, axiosInstance) => {\r\n//   // إذا لم نكن قد حاولنا تحديث التوكن من قبل\r\n//   if (!originalRequest._retry) {\r\n//     originalRequest._retry = true;\r\n\r\n//     try {\r\n//       const refreshTokenValue = tokenManager.getRefreshToken();\r\n//       if (refreshTokenValue) {\r\n//         console.log('🔄 محاولة تحديث التوكن...');\r\n        \r\n//         // طلب تحديث التوكن\r\n//         const response = await refreshToken(refreshTokenValue);\r\n        \r\n//         // تحديث التوكنز في الكوكيز\r\n//         tokenManager.updateTokens(response.access, response.refresh);\r\n        \r\n//         // إعادة الطلب الأصلي مع التوكن الجديد\r\n//         originalRequest.headers.Authorization = `Bearer ${response.access}`;\r\n//         console.log('✅ تم تحديث التوكن وإعادة الطلب');\r\n        \r\n//         return axiosInstance(originalRequest);\r\n//       }\r\n//     } catch (refreshError) {\r\n//       console.log('❌ فشل تحديث التوكن:', refreshError);\r\n//       handleRefreshTokenFailure();\r\n//     }\r\n//   }\r\n\r\n//   // إذا فشل التحديث أو تمت المحاولة من قبل\r\n//   handleRefreshTokenFailure();\r\n//   return Promise.reject(error);\r\n// };\r\n\r\n// // معالجة فشل تحديث التوكن\r\n// export const handleRefreshTokenFailure = () => {\r\n//   console.log('🧹 حذف الجلسة بسبب فشل تحديث التوكن');\r\n//   sessionManager.clearSession();\r\n  \r\n//   // إرسال حدث لحذف الجلسة\r\n//   window.dispatchEvent(new CustomEvent('sessionExpired'));\r\n// };\r\n\r\n// // معالجة أخطاء عامة\r\n// export const handleError = (error) => {\r\n//   console.log('❌ خطأ في الطلب:', error);\r\n  \r\n//   if (error.response?.status === 401) {\r\n//     handleRefreshTokenFailure();\r\n//   }\r\n  \r\n//   return Promise.reject(error);\r\n// }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}