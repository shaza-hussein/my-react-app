{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shaza\\\\Desktop\\\\test for NO\\\\src\\\\Context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// Context/AuthContext.js\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { sessionManager } from '../Config/cookies';\nimport { logoutUser } from '../API';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true); // ✅ جديد\n\n  useEffect(() => {\n    const session = sessionManager.restoreSession();\n    if (session) {\n      console.log('✅ تم استعادة الجلسة:', session);\n      setUser(session.userData);\n      setIsAuthenticated(true);\n    } else {\n      console.log('❌ لا توجد جلسة محفوظة');\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n    setLoading(false); // ✅ مهم جدًا\n  }, []);\n  useEffect(() => {\n    const handleSessionExpired = () => {\n      console.log('🔄 انتهاء الجلسة');\n      sessionManager.clearSession();\n      setUser(null);\n      setIsAuthenticated(false);\n      window.location.href = '/login';\n    };\n    window.addEventListener('sessionExpired', handleSessionExpired);\n    return () => {\n      window.removeEventListener('sessionExpired', handleSessionExpired);\n    };\n  }, []);\n  const login = response => {\n    sessionManager.saveSession(response);\n    const userInfo = {\n      id: response.user.id,\n      first_name: response.user.first_name,\n      last_name: response.user.last_name,\n      is_active: response.user.is_active,\n      role: response.user.role\n    };\n    setUser(userInfo);\n    setIsAuthenticated(true);\n  };\n  const logout = async () => {\n    try {\n      await logoutUser();\n    } catch (error) {\n      console.warn('فشل تسجيل الخروج:', error.message);\n    }\n    sessionManager.clearSession();\n    setUser(null);\n    setIsAuthenticated(false);\n    window.location.href = '/login';\n  };\n  const clearSession = async () => {\n    try {\n      await logoutUser();\n    } catch {}\n    sessionManager.clearSession();\n    setUser(null);\n    setIsAuthenticated(false);\n    window.location.href = '/login';\n  };\n  const getAccessToken = () => {\n    var _sessionManager$resto;\n    return (_sessionManager$resto = sessionManager.restoreSession()) === null || _sessionManager$resto === void 0 ? void 0 : _sessionManager$resto.accessToken;\n  };\n  const getRefreshToken = () => {\n    var _sessionManager$resto2;\n    return (_sessionManager$resto2 = sessionManager.restoreSession()) === null || _sessionManager$resto2 === void 0 ? void 0 : _sessionManager$resto2.refreshToken;\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    // ✅ إضافة هذه القيمة\n    login,\n    logout,\n    clearSession,\n    getAccessToken,\n    getRefreshToken\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 10\n  }, this);\n};\n\n// import { createContext, useContext, useState, useEffect } from 'react';\n// import { sessionManager } from '../Config/cookies';\n// import { logoutUser } from '../API';\n\n// const AuthContext = createContext();\n\n// export const useAuth = () => {\n//   const context = useContext(AuthContext);\n//   if (!context) {\n//     throw new Error('useAuth must be used within an AuthProvider');\n//   }\n//   return context;\n// };\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n//   // التحقق من وجود توكن عند تحميل التطبيق\n//   useEffect(() => {\n//     const session = sessionManager.restoreSession();\n\n//     if (session) {\n//       console.log('✅ تم استعادة الجلسة:', session);\n//       setUser(session.userData);\n//       setIsAuthenticated(true);\n//     } else {\n//       console.log('❌ لا توجد جلسة محفوظة');\n//     }\n//   }, []);\n\n//   // الاستماع لحدث انتهاء الجلسة\n//   useEffect(() => {\n//     const handleSessionExpired = () => {\n//       console.log('🔄 استقبال حدث انتهاء الجلسة');\n\n//       // حذف الجلسة من الكوكيز\n//       sessionManager.clearSession();\n\n//       // إعادة تعيين الحالة\n//       setUser(null);\n//       setIsAuthenticated(false);\n\n//       // التوجيه إلى صفحة تسجيل الدخول\n//       window.location.href = '/login';\n//     };\n\n//     window.addEventListener('sessionExpired', handleSessionExpired);\n\n//     return () => {\n//       window.removeEventListener('sessionExpired', handleSessionExpired);\n//     };\n//   }, []);\n\n//   // تسجيل الدخول\n//   const login = (response) => {\n//     console.log('🔄 بدء تسجيل الدخول:', response);\n\n//     // حفظ الجلسة في الكوكيز\n//     sessionManager.saveSession(response);\n\n//     // استخراج بيانات المستخدم للـ Context\n//     const userInfo = {\n//       id: response.user.id,\n//       first_name: response.user.first_name,\n//       last_name: response.user.last_name,\n//       is_active: response.user.is_active,\n//       role: response.user.role\n//     };\n\n//     console.log('✅ تم حفظ الجلسة بنجاح:', {\n//       userInfo,\n//       hasSession: sessionManager.hasSession()\n//     });\n\n//     // تحديث حالة التطبيق\n//     setUser(userInfo);\n//     setIsAuthenticated(true);\n//   };\n\n//   // تسجيل الخروج\n//   const logout = async () => {\n//     console.log('🔄 بدء تسجيل الخروج');\n\n//     try {\n//       // إرسال طلب تسجيل الخروج للخادم\n//       await logoutUser();\n//       console.log('✅ تم تسجيل الخروج من الخادم');\n//     } catch (error) {\n//       console.log('⚠️ فشل تسجيل الخروج من الخادم:', error);\n\n//       // إذا كان الخطأ 401، فهذا يعني أن التوكن منتهي الصلاحية\n//       if (error.response?.status === 401) {\n//         console.log('🔑 التوكن منتهي الصلاحية، سيتم حذف الجلسة المحلية فقط');\n//       } else {\n//         console.log('❌ خطأ آخر في تسجيل الخروج:', error.message);\n//       }\n//       // نستمر في حذف الجلسة المحلية حتى لو فشل الطلب\n//     }\n\n//     // حذف الجلسة من الكوكيز (في جميع الحالات)\n//     sessionManager.clearSession();\n\n//     console.log('✅ تم حذف الجلسة المحلية بنجاح');\n\n//     // إعادة تعيين الحالة\n//     setUser(null);\n//     setIsAuthenticated(false);\n\n//     // التوجيه إلى صفحة تسجيل الدخول\n//     window.location.href = '/login';\n//   };\n\n//   // تنظيف الجلسة (لحل المشاكل)\n//   const clearSession = async () => {\n//     console.log('🧹 تنظيف الجلسة');\n\n//     try {\n//       // محاولة تسجيل الخروج من الخادم\n//       await logoutUser();\n//       console.log('✅ تم تسجيل الخروج من الخادم');\n//     } catch (error) {\n//       console.log('⚠️ فشل تسجيل الخروج من الخادم:', error);\n//       // نستمر في حذف الجلسة المحلية حتى لو فشل الطلب\n//     }\n\n//     // حذف الجلسة من الكوكيز\n//     sessionManager.clearSession();\n//     setUser(null);\n//     setIsAuthenticated(false);\n\n//     // التوجيه إلى صفحة تسجيل الدخول\n//     window.location.href = '/login';\n//   };\n\n//   // الحصول على التوكن الحالي\n//   const getAccessToken = () => {\n//     const token = sessionManager.restoreSession()?.accessToken;\n//     console.log('🔑 Access Token:', token ? 'موجود' : 'غير موجود');\n//     return token;\n//   };\n\n//   // الحصول على refresh token\n//   const getRefreshToken = () => {\n//     const token = sessionManager.restoreSession()?.refreshToken;\n//     console.log('🔄 Refresh Token:', token ? 'موجود' : 'غير موجود');\n//     return token;\n//   };\n\n//   const value = {\n//     user,\n//     isAuthenticated,\n//     login,\n//     logout,\n//     clearSession,\n//     getAccessToken,\n//     getRefreshToken\n//   };\n\n//   return (\n//     <AuthContext.Provider value={value}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// }; \n_s2(AuthProvider, \"b4+7DbNXBEPJ9yvfWqnHeolhh+c=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","sessionManager","logoutUser","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","session","restoreSession","console","log","userData","handleSessionExpired","clearSession","window","location","href","addEventListener","removeEventListener","login","response","saveSession","userInfo","id","first_name","last_name","is_active","role","logout","error","warn","message","getAccessToken","_sessionManager$resto","accessToken","getRefreshToken","_sessionManager$resto2","refreshToken","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shaza/Desktop/test for NO/src/Context/AuthContext.js"],"sourcesContent":["// Context/AuthContext.js\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { sessionManager } from '../Config/cookies';\nimport { logoutUser } from '../API';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true); // ✅ جديد\n\n  useEffect(() => {\n    const session = sessionManager.restoreSession();\n\n    if (session) {\n      console.log('✅ تم استعادة الجلسة:', session);\n      setUser(session.userData);\n      setIsAuthenticated(true);\n    } else {\n      console.log('❌ لا توجد جلسة محفوظة');\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n\n    setLoading(false); // ✅ مهم جدًا\n  }, []);\n\n  useEffect(() => {\n    const handleSessionExpired = () => {\n      console.log('🔄 انتهاء الجلسة');\n      sessionManager.clearSession();\n      setUser(null);\n      setIsAuthenticated(false);\n      window.location.href = '/login';\n    };\n\n    window.addEventListener('sessionExpired', handleSessionExpired);\n    return () => {\n      window.removeEventListener('sessionExpired', handleSessionExpired);\n    };\n  }, []);\n\n  const login = (response) => {\n    sessionManager.saveSession(response);\n    const userInfo = {\n      id: response.user.id,\n      first_name: response.user.first_name,\n      last_name: response.user.last_name,\n      is_active: response.user.is_active,\n      role: response.user.role\n    };\n    setUser(userInfo);\n    setIsAuthenticated(true);\n  };\n\n  const logout = async () => {\n    try {\n      await logoutUser();\n    } catch (error) {\n      console.warn('فشل تسجيل الخروج:', error.message);\n    }\n\n    sessionManager.clearSession();\n    setUser(null);\n    setIsAuthenticated(false);\n    window.location.href = '/login';\n  };\n\n  const clearSession = async () => {\n    try {\n      await logoutUser();\n    } catch {}\n    sessionManager.clearSession();\n    setUser(null);\n    setIsAuthenticated(false);\n    window.location.href = '/login';\n  };\n\n  const getAccessToken = () => {\n    return sessionManager.restoreSession()?.accessToken;\n  };\n\n  const getRefreshToken = () => {\n    return sessionManager.restoreSession()?.refreshToken;\n  };\n\n  const value = {\n    user,\n    isAuthenticated,\n    loading, // ✅ إضافة هذه القيمة\n    login,\n    logout,\n    clearSession,\n    getAccessToken,\n    getRefreshToken\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\n\n\n\n// import { createContext, useContext, useState, useEffect } from 'react';\n// import { sessionManager } from '../Config/cookies';\n// import { logoutUser } from '../API';\n\n// const AuthContext = createContext();\n\n// export const useAuth = () => {\n//   const context = useContext(AuthContext);\n//   if (!context) {\n//     throw new Error('useAuth must be used within an AuthProvider');\n//   }\n//   return context;\n// };\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n//   // التحقق من وجود توكن عند تحميل التطبيق\n//   useEffect(() => {\n//     const session = sessionManager.restoreSession();\n    \n//     if (session) {\n//       console.log('✅ تم استعادة الجلسة:', session);\n//       setUser(session.userData);\n//       setIsAuthenticated(true);\n//     } else {\n//       console.log('❌ لا توجد جلسة محفوظة');\n//     }\n//   }, []);\n\n//   // الاستماع لحدث انتهاء الجلسة\n//   useEffect(() => {\n//     const handleSessionExpired = () => {\n//       console.log('🔄 استقبال حدث انتهاء الجلسة');\n      \n//       // حذف الجلسة من الكوكيز\n//       sessionManager.clearSession();\n      \n//       // إعادة تعيين الحالة\n//       setUser(null);\n//       setIsAuthenticated(false);\n      \n//       // التوجيه إلى صفحة تسجيل الدخول\n//       window.location.href = '/login';\n//     };\n\n//     window.addEventListener('sessionExpired', handleSessionExpired);\n\n//     return () => {\n//       window.removeEventListener('sessionExpired', handleSessionExpired);\n//     };\n//   }, []);\n\n//   // تسجيل الدخول\n//   const login = (response) => {\n//     console.log('🔄 بدء تسجيل الدخول:', response);\n    \n//     // حفظ الجلسة في الكوكيز\n//     sessionManager.saveSession(response);\n    \n//     // استخراج بيانات المستخدم للـ Context\n//     const userInfo = {\n//       id: response.user.id,\n//       first_name: response.user.first_name,\n//       last_name: response.user.last_name,\n//       is_active: response.user.is_active,\n//       role: response.user.role\n//     };\n\n//     console.log('✅ تم حفظ الجلسة بنجاح:', {\n//       userInfo,\n//       hasSession: sessionManager.hasSession()\n//     });\n\n//     // تحديث حالة التطبيق\n//     setUser(userInfo);\n//     setIsAuthenticated(true);\n//   };\n\n//   // تسجيل الخروج\n//   const logout = async () => {\n//     console.log('🔄 بدء تسجيل الخروج');\n    \n//     try {\n//       // إرسال طلب تسجيل الخروج للخادم\n//       await logoutUser();\n//       console.log('✅ تم تسجيل الخروج من الخادم');\n//     } catch (error) {\n//       console.log('⚠️ فشل تسجيل الخروج من الخادم:', error);\n      \n//       // إذا كان الخطأ 401، فهذا يعني أن التوكن منتهي الصلاحية\n//       if (error.response?.status === 401) {\n//         console.log('🔑 التوكن منتهي الصلاحية، سيتم حذف الجلسة المحلية فقط');\n//       } else {\n//         console.log('❌ خطأ آخر في تسجيل الخروج:', error.message);\n//       }\n//       // نستمر في حذف الجلسة المحلية حتى لو فشل الطلب\n//     }\n    \n//     // حذف الجلسة من الكوكيز (في جميع الحالات)\n//     sessionManager.clearSession();\n    \n//     console.log('✅ تم حذف الجلسة المحلية بنجاح');\n    \n//     // إعادة تعيين الحالة\n//     setUser(null);\n//     setIsAuthenticated(false);\n    \n//     // التوجيه إلى صفحة تسجيل الدخول\n//     window.location.href = '/login';\n//   };\n\n//   // تنظيف الجلسة (لحل المشاكل)\n//   const clearSession = async () => {\n//     console.log('🧹 تنظيف الجلسة');\n    \n//     try {\n//       // محاولة تسجيل الخروج من الخادم\n//       await logoutUser();\n//       console.log('✅ تم تسجيل الخروج من الخادم');\n//     } catch (error) {\n//       console.log('⚠️ فشل تسجيل الخروج من الخادم:', error);\n//       // نستمر في حذف الجلسة المحلية حتى لو فشل الطلب\n//     }\n    \n//     // حذف الجلسة من الكوكيز\n//     sessionManager.clearSession();\n//     setUser(null);\n//     setIsAuthenticated(false);\n    \n//     // التوجيه إلى صفحة تسجيل الدخول\n//     window.location.href = '/login';\n//   };\n\n//   // الحصول على التوكن الحالي\n//   const getAccessToken = () => {\n//     const token = sessionManager.restoreSession()?.accessToken;\n//     console.log('🔑 Access Token:', token ? 'موجود' : 'غير موجود');\n//     return token;\n//   };\n\n//   // الحصول على refresh token\n//   const getRefreshToken = () => {\n//     const token = sessionManager.restoreSession()?.refreshToken;\n//     console.log('🔄 Refresh Token:', token ? 'موجود' : 'غير موجود');\n//     return token;\n//   };\n\n//   const value = {\n//     user,\n//     isAuthenticated,\n//     login,\n//     logout,\n//     clearSession,\n//     getAccessToken,\n//     getRefreshToken\n//   };\n\n//   return (\n//     <AuthContext.Provider value={value}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}