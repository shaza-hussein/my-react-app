{"ast":null,"code":"// src/Utils/logoutHelper.js\n\n// معالجة أخطاء تسجيل الخروج\nexport const handleLogoutError = error => {\n  var _error$response, _error$response2, _error$response3, _error$response4, _error$response5;\n  console.error('خطأ في تسجيل الخروج:', error);\n  let errorMessage = 'حدث خطأ أثناء تسجيل الخروج';\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 400) {\n    errorMessage = 'خطأ في البيانات المرسلة للخادم';\n    console.log('❌ خطأ في البيانات المرسلة للخادم');\n  } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401) {\n    errorMessage = 'التوكن منتهي الصلاحية';\n    console.log('❌ التوكن منتهي الصلاحية');\n  } else if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 403) {\n    errorMessage = 'غير مصرح لك بتسجيل الخروج';\n    console.log('❌ غير مصرح لك بتسجيل الخروج');\n  } else if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) >= 500) {\n    errorMessage = 'خطأ في الخادم، يرجى المحاولة لاحقاً';\n    console.log('❌ خطأ في الخادم');\n  } else if (!error.response) {\n    errorMessage = 'خطأ في الاتصال بالخادم';\n    console.log('❌ خطأ في الاتصال بالخادم');\n  }\n  return {\n    message: errorMessage,\n    status: (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status,\n    originalError: error\n  };\n};\n\n// التحقق من صحة الجلسة قبل تسجيل الخروج\nexport const validateSessionBeforeLogout = () => {\n  const {\n    sessionManager\n  } = require('../Config/cookies');\n  const session = sessionManager.restoreSession();\n  if (!session) {\n    console.log('⚠️ لا توجد جلسة للخروج منها');\n    return false;\n  }\n  if (!session.refreshToken) {\n    console.log('⚠️ لا يوجد refresh token للخروج');\n    return false;\n  }\n  return true;\n};\n\n// تنظيف البيانات المحلية بعد تسجيل الخروج\nexport const cleanupAfterLogout = () => {\n  console.log('🧹 بدء تنظيف البيانات المحلية بعد تسجيل الخروج');\n  try {\n    // 1. حذف البيانات من localStorage\n    const localStorageKeys = ['user_preferences', 'app_settings', 'cached_data', 'form_data', 'temp_data'];\n    localStorageKeys.forEach(key => {\n      if (localStorage.getItem(key)) {\n        localStorage.removeItem(key);\n        console.log(`🗑️ تم حذف ${key} من localStorage`);\n      }\n    });\n\n    // 2. حذف البيانات من sessionStorage\n    sessionStorage.clear();\n    console.log('🗑️ تم مسح sessionStorage');\n\n    // 3. حذف الكوكيز الإضافية (غير الجلسة)\n    const cookiesToRemove = ['theme_preference', 'language_preference', 'sidebar_collapsed', 'last_visited_page'];\n    cookiesToRemove.forEach(cookieName => {\n      document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;\n      console.log(`🍪 تم حذف كوكيز ${cookieName}`);\n    });\n\n    // 4. إعادة تعيين متغيرات التطبيق العامة\n    if (window.appState) {\n      window.appState = null;\n      console.log('🔄 تم إعادة تعيين appState');\n    }\n\n    // 5. إلغاء الطلبات المعلقة (إذا كان هناك axios)\n    if (window.axios && window.axios.CancelToken) {\n      // يمكن إضافة منطق إلغاء الطلبات هنا\n      console.log('🚫 تم إلغاء الطلبات المعلقة');\n    }\n\n    // 6. تنظيف أي event listeners مخصصة\n    const customEvents = ['userDataChanged', 'appRefresh', 'dataUpdated'];\n    customEvents.forEach(eventName => {\n      window.removeEventListener(eventName, () => {});\n      console.log(`🎧 تم إزالة event listener: ${eventName}`);\n    });\n\n    // 7. إعادة تعيين أي متغيرات React Context (إذا كانت متاحة)\n    if (window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {\n      // تنظيف React DevTools إذا كان متاحاً\n      console.log('⚛️ تم تنظيف React DevTools');\n    }\n    console.log('✅ تم تنظيف جميع البيانات المحلية بنجاح');\n    return true;\n  } catch (error) {\n    console.error('❌ خطأ أثناء تنظيف البيانات المحلية:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["handleLogoutError","error","_error$response","_error$response2","_error$response3","_error$response4","_error$response5","console","errorMessage","response","status","log","message","originalError","validateSessionBeforeLogout","sessionManager","require","session","restoreSession","refreshToken","cleanupAfterLogout","localStorageKeys","forEach","key","localStorage","getItem","removeItem","sessionStorage","clear","cookiesToRemove","cookieName","document","cookie","window","appState","axios","CancelToken","customEvents","eventName","removeEventListener","__REACT_DEVTOOLS_GLOBAL_HOOK__"],"sources":["C:/Users/shaza/Desktop/test for NO/src/Utils/logoutHelper.js"],"sourcesContent":["// src/Utils/logoutHelper.js\r\n\r\n// معالجة أخطاء تسجيل الخروج\r\nexport const handleLogoutError = (error) => {\r\n  console.error('خطأ في تسجيل الخروج:', error);\r\n  \r\n  let errorMessage = 'حدث خطأ أثناء تسجيل الخروج';\r\n  \r\n  if (error.response?.status === 400) {\r\n    errorMessage = 'خطأ في البيانات المرسلة للخادم';\r\n    console.log('❌ خطأ في البيانات المرسلة للخادم');\r\n  } else if (error.response?.status === 401) {\r\n    errorMessage = 'التوكن منتهي الصلاحية';\r\n    console.log('❌ التوكن منتهي الصلاحية');\r\n  } else if (error.response?.status === 403) {\r\n    errorMessage = 'غير مصرح لك بتسجيل الخروج';\r\n    console.log('❌ غير مصرح لك بتسجيل الخروج');\r\n  } else if (error.response?.status >= 500) {\r\n    errorMessage = 'خطأ في الخادم، يرجى المحاولة لاحقاً';\r\n    console.log('❌ خطأ في الخادم');\r\n  } else if (!error.response) {\r\n    errorMessage = 'خطأ في الاتصال بالخادم';\r\n    console.log('❌ خطأ في الاتصال بالخادم');\r\n  }\r\n  \r\n  return {\r\n    message: errorMessage,\r\n    status: error.response?.status,\r\n    originalError: error\r\n  };\r\n};\r\n\r\n// التحقق من صحة الجلسة قبل تسجيل الخروج\r\nexport const validateSessionBeforeLogout = () => {\r\n  const { sessionManager } = require('../Config/cookies');\r\n  const session = sessionManager.restoreSession();\r\n  \r\n  if (!session) {\r\n    console.log('⚠️ لا توجد جلسة للخروج منها');\r\n    return false;\r\n  }\r\n  \r\n  if (!session.refreshToken) {\r\n    console.log('⚠️ لا يوجد refresh token للخروج');\r\n    return false;\r\n  }\r\n  \r\n  return true;\r\n};\r\n\r\n// تنظيف البيانات المحلية بعد تسجيل الخروج\r\nexport const cleanupAfterLogout = () => {\r\n  console.log('🧹 بدء تنظيف البيانات المحلية بعد تسجيل الخروج');\r\n  \r\n  try {\r\n    // 1. حذف البيانات من localStorage\r\n    const localStorageKeys = [\r\n      'user_preferences',\r\n      'app_settings',\r\n      'cached_data',\r\n      'form_data',\r\n      'temp_data'\r\n    ];\r\n    \r\n    localStorageKeys.forEach(key => {\r\n      if (localStorage.getItem(key)) {\r\n        localStorage.removeItem(key);\r\n        console.log(`🗑️ تم حذف ${key} من localStorage`);\r\n      }\r\n    });\r\n    \r\n    // 2. حذف البيانات من sessionStorage\r\n    sessionStorage.clear();\r\n    console.log('🗑️ تم مسح sessionStorage');\r\n    \r\n    // 3. حذف الكوكيز الإضافية (غير الجلسة)\r\n    const cookiesToRemove = [\r\n      'theme_preference',\r\n      'language_preference',\r\n      'sidebar_collapsed',\r\n      'last_visited_page'\r\n    ];\r\n    \r\n    cookiesToRemove.forEach(cookieName => {\r\n      document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;\r\n      console.log(`🍪 تم حذف كوكيز ${cookieName}`);\r\n    });\r\n    \r\n    // 4. إعادة تعيين متغيرات التطبيق العامة\r\n    if (window.appState) {\r\n      window.appState = null;\r\n      console.log('🔄 تم إعادة تعيين appState');\r\n    }\r\n    \r\n    // 5. إلغاء الطلبات المعلقة (إذا كان هناك axios)\r\n    if (window.axios && window.axios.CancelToken) {\r\n      // يمكن إضافة منطق إلغاء الطلبات هنا\r\n      console.log('🚫 تم إلغاء الطلبات المعلقة');\r\n    }\r\n    \r\n    // 6. تنظيف أي event listeners مخصصة\r\n    const customEvents = ['userDataChanged', 'appRefresh', 'dataUpdated'];\r\n    customEvents.forEach(eventName => {\r\n      window.removeEventListener(eventName, () => {});\r\n      console.log(`🎧 تم إزالة event listener: ${eventName}`);\r\n    });\r\n    \r\n    // 7. إعادة تعيين أي متغيرات React Context (إذا كانت متاحة)\r\n    if (window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {\r\n      // تنظيف React DevTools إذا كان متاحاً\r\n      console.log('⚛️ تم تنظيف React DevTools');\r\n    }\r\n    \r\n    console.log('✅ تم تنظيف جميع البيانات المحلية بنجاح');\r\n    return true;\r\n    \r\n  } catch (error) {\r\n    console.error('❌ خطأ أثناء تنظيف البيانات المحلية:', error);\r\n    return false;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}