{"ast":null,"code":"import { refreshToken } from '../API';\nimport { sessionManager } from '../Config/cookies';\n\n// استخراج رسالة الخطأ من استجابة الباك إند\nconst extractErrorMessage = data => {\n  console.log('🔍 استخراج رسالة الخطأ من:', data);\n\n  // إذا كان هناك رسالة خطأ مباشرة\n  if (typeof data === 'string') {\n    console.log('✅ رسالة خطأ مباشرة:', data);\n    return data;\n  }\n\n  // إذا كان هناك رسالة خطأ محددة\n  if (data.message) {\n    console.log('✅ رسالة خطأ محددة:', data.message);\n    return data.message;\n  }\n\n  // إذا كان هناك رسالة خطأ باللغة العربية\n  if (data.message_ar) {\n    console.log('✅ رسالة خطأ عربية:', data.message_ar);\n    return data.message_ar;\n  }\n\n  // إذا كان هناك أخطاء في الحقول (Django REST Framework style)\n  if (data.errors) {\n    const errorMessages = [];\n\n    // التعامل مع أخطاء الحقول\n    Object.keys(data.errors).forEach(field => {\n      const fieldErrors = data.errors[field];\n      if (Array.isArray(fieldErrors)) {\n        errorMessages.push(...fieldErrors);\n      } else if (typeof fieldErrors === 'string') {\n        errorMessages.push(fieldErrors);\n      }\n    });\n    if (errorMessages.length > 0) {\n      const message = errorMessages.join(', ');\n      console.log('✅ رسالة خطأ من الحقول:', message);\n      return message;\n    }\n  }\n\n  // إذا كان هناك أخطاء في الحقول \n  if (data.error) {\n    console.log('✅ رسالة خطأ عامة:', data.error);\n    return data.error;\n  }\n\n  // إذا كان هناك تفاصيل\n  if (data.detail) {\n    console.log('✅ رسالة خطأ تفصيلية:', data.detail);\n    return data.detail;\n  }\n\n  // إذا كان هناك قائمة أخطاء\n  if (Array.isArray(data)) {\n    const message = data.join(', ');\n    console.log('✅ رسالة خطأ من القائمة:', message);\n    return message;\n  }\n\n  // إذا كان هناك رسالة خطأ في non_field_errors (Django)\n  if (data.non_field_errors) {\n    const message = data.non_field_errors.join(', ');\n    console.log('✅ رسالة خطأ من non_field_errors:', message);\n    return message;\n  }\n  console.log('❌ لم يتم العثور على رسالة خطأ');\n  return null;\n};\n\n// معالجة أخطاء API - استخراج رسالة الخطأ من الباك إند فقط\nexport const handleApiError = error => {\n  var _error$response;\n  console.log('❌ خطأ في API:', error);\n\n  // إذا كان هناك استجابة من الخادم\n  if ((_error$response = error.response) !== null && _error$response !== void 0 && _error$response.data) {\n    const errorMessage = extractErrorMessage(error.response.data);\n    if (errorMessage) {\n      return errorMessage;\n    }\n  }\n\n  // إذا كان هناك رسالة خطأ في error.message\n  if (error.message) {\n    // تجاهل رسائل axios العامة\n    if (!error.message.includes('Network Error') && !error.message.includes('timeout') && !error.message.includes('Request failed')) {\n      return error.message;\n    }\n  }\n\n  // إذا لم يكن هناك استجابة من الخادم\n  if (!error.response) {\n    return 'فشل في الاتصال بالخادم، يرجى التحقق من اتصال الإنترنت';\n  }\n\n  // إذا لم نتمكن من استخراج رسالة خطأ، نعرض رسالة عامة\n  return 'حدث خطأ غير متوقع، يرجى المحاولة مرة أخرى';\n};\n\n// معالجة خطأ 401 (غير مصرح)\nexport const handleUnauthorizedError = async (error, originalRequest, axiosInstance) => {\n  console.log('🔄 بدء معالجة خطأ 401...');\n\n  // إذا لم نكن قد حاولنا تحديث التوكن من قبل\n  if (!originalRequest._retry) {\n    originalRequest._retry = true;\n    console.log('🔄 محاولة تحديث التوكن للمرة الأولى...');\n    try {\n      const session = sessionManager.restoreSession();\n      const refreshTokenValue = session === null || session === void 0 ? void 0 : session.refreshToken;\n      console.log('🔍 فحص refresh token:', {\n        hasSession: !!session,\n        hasRefreshToken: !!refreshTokenValue\n      });\n      if (refreshTokenValue) {\n        console.log('🔄 محاولة تحديث التوكن...');\n\n        // طلب تحديث التوكن\n        const response = await refreshToken(refreshTokenValue);\n        console.log('✅ تم تحديث التوكن بنجاح');\n\n        // تحديث التوكنز في الكوكيز\n        sessionManager.saveSession({\n          access: response.access,\n          refresh: response.refresh,\n          user: session.userData\n        });\n\n        // إعادة الطلب الأصلي مع التوكن الجديد\n        originalRequest.headers.Authorization = `Bearer ${response.access}`;\n        console.log('✅ تم تحديث التوكن وإعادة الطلب');\n        return axiosInstance(originalRequest);\n      } else {\n        console.log('❌ لا يوجد refresh token');\n        handleRefreshTokenFailure();\n      }\n    } catch (refreshError) {\n      console.log('❌ فشل تحديث التوكن:', refreshError);\n      handleRefreshTokenFailure();\n    }\n  } else {\n    console.log('❌ تمت محاولة تحديث التوكن من قبل');\n  }\n\n  // إذا فشل التحديث أو تمت المحاولة من قبل\n  handleRefreshTokenFailure();\n  return Promise.reject(error);\n};\n\n// معالجة فشل تحديث التوكن\nexport const handleRefreshTokenFailure = () => {\n  console.log('🧹 حذف الجلسة بسبب فشل تحديث التوكن');\n  sessionManager.clearSession();\n  console.log('✅ تم حذف الجلسة من الكوكيز');\n\n  // إرسال حدث لحذف الجلسة\n  window.dispatchEvent(new CustomEvent('sessionExpired'));\n  console.log('✅ تم إرسال حدث انتهاء الجلسة');\n};\n\n// معالجة أخطاء عامة\nexport const handleError = error => {\n  var _error$response2, _error$response3, _error$response4, _error$response5;\n  console.log('❌ خطأ في الطلب:', error);\n  console.log('🔍 تفاصيل الخطأ:', {\n    status: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status,\n    statusText: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.statusText,\n    data: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data,\n    message: error.message\n  });\n  if (((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status) === 401) {\n    console.log('🚫 خطأ 401 - غير مصرح، حذف الجلسة...');\n    handleRefreshTokenFailure();\n  }\n  return Promise.reject(error);\n};\n\n// هذا القديم قبل ما تنقلي مكان الملف من config\n// import { refreshToken } from '../API/Auth';\n// import { tokenManager, sessionManager } from './cookies';\n\n// // معالجة خطأ 401 (غير مصرح)\n// export const handleUnauthorizedError = async (error, originalRequest, axiosInstance) => {\n//   // إذا لم نكن قد حاولنا تحديث التوكن من قبل\n//   if (!originalRequest._retry) {\n//     originalRequest._retry = true;\n\n//     try {\n//       const refreshTokenValue = tokenManager.getRefreshToken();\n//       if (refreshTokenValue) {\n//         console.log('🔄 محاولة تحديث التوكن...');\n\n//         // طلب تحديث التوكن\n//         const response = await refreshToken(refreshTokenValue);\n\n//         // تحديث التوكنز في الكوكيز\n//         tokenManager.updateTokens(response.access, response.refresh);\n\n//         // إعادة الطلب الأصلي مع التوكن الجديد\n//         originalRequest.headers.Authorization = `Bearer ${response.access}`;\n//         console.log('✅ تم تحديث التوكن وإعادة الطلب');\n\n//         return axiosInstance(originalRequest);\n//       }\n//     } catch (refreshError) {\n//       console.log('❌ فشل تحديث التوكن:', refreshError);\n//       handleRefreshTokenFailure();\n//     }\n//   }\n\n//   // إذا فشل التحديث أو تمت المحاولة من قبل\n//   handleRefreshTokenFailure();\n//   return Promise.reject(error);\n// };\n\n// // معالجة فشل تحديث التوكن\n// export const handleRefreshTokenFailure = () => {\n//   console.log('🧹 حذف الجلسة بسبب فشل تحديث التوكن');\n//   sessionManager.clearSession();\n\n//   // إرسال حدث لحذف الجلسة\n//   window.dispatchEvent(new CustomEvent('sessionExpired'));\n// };\n\n// // معالجة أخطاء عامة\n// export const handleError = (error) => {\n//   console.log('❌ خطأ في الطلب:', error);\n\n//   if (error.response?.status === 401) {\n//     handleRefreshTokenFailure();\n//   }\n\n//   return Promise.reject(error);\n// };","map":{"version":3,"names":["refreshToken","sessionManager","extractErrorMessage","data","console","log","message","message_ar","errors","errorMessages","Object","keys","forEach","field","fieldErrors","Array","isArray","push","length","join","error","detail","non_field_errors","handleApiError","_error$response","response","errorMessage","includes","handleUnauthorizedError","originalRequest","axiosInstance","_retry","session","restoreSession","refreshTokenValue","hasSession","hasRefreshToken","saveSession","access","refresh","user","userData","headers","Authorization","handleRefreshTokenFailure","refreshError","Promise","reject","clearSession","window","dispatchEvent","CustomEvent","handleError","_error$response2","_error$response3","_error$response4","_error$response5","status","statusText"],"sources":["C:/Users/shaza/Desktop/test for NO/src/Utils/errorHandler.js"],"sourcesContent":["import { refreshToken } from '../API';\r\nimport { sessionManager } from '../Config/cookies';\r\n\r\n// استخراج رسالة الخطأ من استجابة الباك إند\r\nconst extractErrorMessage = (data) => {\r\n  console.log('🔍 استخراج رسالة الخطأ من:', data);\r\n  \r\n  // إذا كان هناك رسالة خطأ مباشرة\r\n  if (typeof data === 'string') {\r\n    console.log('✅ رسالة خطأ مباشرة:', data);\r\n    return data;\r\n  }\r\n  \r\n  // إذا كان هناك رسالة خطأ محددة\r\n  if (data.message) {\r\n    console.log('✅ رسالة خطأ محددة:', data.message);\r\n    return data.message;\r\n  }\r\n  \r\n  // إذا كان هناك رسالة خطأ باللغة العربية\r\n  if (data.message_ar) {\r\n    console.log('✅ رسالة خطأ عربية:', data.message_ar);\r\n    return data.message_ar;\r\n  }\r\n  \r\n  // إذا كان هناك أخطاء في الحقول (Django REST Framework style)\r\n  if (data.errors) {\r\n    const errorMessages = [];\r\n    \r\n    // التعامل مع أخطاء الحقول\r\n    Object.keys(data.errors).forEach(field => {\r\n      const fieldErrors = data.errors[field];\r\n      if (Array.isArray(fieldErrors)) {\r\n        errorMessages.push(...fieldErrors);\r\n      } else if (typeof fieldErrors === 'string') {\r\n        errorMessages.push(fieldErrors);\r\n      }\r\n    });\r\n    \r\n    if (errorMessages.length > 0) {\r\n      const message = errorMessages.join(', ');\r\n      console.log('✅ رسالة خطأ من الحقول:', message);\r\n      return message;\r\n    }\r\n  }\r\n  \r\n  // إذا كان هناك أخطاء في الحقول \r\n  if (data.error) {\r\n    console.log('✅ رسالة خطأ عامة:', data.error);\r\n    return data.error;\r\n  }\r\n  \r\n  // إذا كان هناك تفاصيل\r\n  if (data.detail) {\r\n    console.log('✅ رسالة خطأ تفصيلية:', data.detail);\r\n    return data.detail;\r\n  }\r\n  \r\n  // إذا كان هناك قائمة أخطاء\r\n  if (Array.isArray(data)) {\r\n    const message = data.join(', ');\r\n    console.log('✅ رسالة خطأ من القائمة:', message);\r\n    return message;\r\n  }\r\n  \r\n  // إذا كان هناك رسالة خطأ في non_field_errors (Django)\r\n  if (data.non_field_errors) {\r\n    const message = data.non_field_errors.join(', ');\r\n    console.log('✅ رسالة خطأ من non_field_errors:', message);\r\n    return message;\r\n  }\r\n  \r\n  console.log('❌ لم يتم العثور على رسالة خطأ');\r\n  return null;\r\n};\r\n\r\n// معالجة أخطاء API - استخراج رسالة الخطأ من الباك إند فقط\r\nexport const handleApiError = (error) => {\r\n  console.log('❌ خطأ في API:', error);\r\n  \r\n  // إذا كان هناك استجابة من الخادم\r\n  if (error.response?.data) {\r\n    const errorMessage = extractErrorMessage(error.response.data);\r\n    if (errorMessage) {\r\n      return errorMessage;\r\n    }\r\n  }\r\n  \r\n  // إذا كان هناك رسالة خطأ في error.message\r\n  if (error.message) {\r\n    // تجاهل رسائل axios العامة\r\n    if (!error.message.includes('Network Error') && \r\n        !error.message.includes('timeout') &&\r\n        !error.message.includes('Request failed')) {\r\n      return error.message;\r\n    }\r\n  }\r\n  \r\n  // إذا لم يكن هناك استجابة من الخادم\r\n  if (!error.response) {\r\n    return 'فشل في الاتصال بالخادم، يرجى التحقق من اتصال الإنترنت';\r\n  }\r\n  \r\n  // إذا لم نتمكن من استخراج رسالة خطأ، نعرض رسالة عامة\r\n  return 'حدث خطأ غير متوقع، يرجى المحاولة مرة أخرى';\r\n};\r\n\r\n// معالجة خطأ 401 (غير مصرح)\r\nexport const handleUnauthorizedError = async (error, originalRequest, axiosInstance) => {\r\n  console.log('🔄 بدء معالجة خطأ 401...');\r\n  \r\n  // إذا لم نكن قد حاولنا تحديث التوكن من قبل\r\n  if (!originalRequest._retry) {\r\n    originalRequest._retry = true;\r\n    console.log('🔄 محاولة تحديث التوكن للمرة الأولى...');\r\n\r\n    try {\r\n      const session = sessionManager.restoreSession();\r\n      const refreshTokenValue = session?.refreshToken;\r\n      \r\n      console.log('🔍 فحص refresh token:', {\r\n        hasSession: !!session,\r\n        hasRefreshToken: !!refreshTokenValue\r\n      });\r\n      \r\n      if (refreshTokenValue) {\r\n        console.log('🔄 محاولة تحديث التوكن...');\r\n        \r\n        // طلب تحديث التوكن\r\n        const response = await refreshToken(refreshTokenValue);\r\n        console.log('✅ تم تحديث التوكن بنجاح');\r\n        \r\n        // تحديث التوكنز في الكوكيز\r\n        sessionManager.saveSession({\r\n          access: response.access,\r\n          refresh: response.refresh,\r\n          user: session.userData\r\n        });\r\n        \r\n        // إعادة الطلب الأصلي مع التوكن الجديد\r\n        originalRequest.headers.Authorization = `Bearer ${response.access}`;\r\n        console.log('✅ تم تحديث التوكن وإعادة الطلب');\r\n        \r\n        return axiosInstance(originalRequest);\r\n      } else {\r\n        console.log('❌ لا يوجد refresh token');\r\n        handleRefreshTokenFailure();\r\n      }\r\n    } catch (refreshError) {\r\n      console.log('❌ فشل تحديث التوكن:', refreshError);\r\n      handleRefreshTokenFailure();\r\n    }\r\n  } else {\r\n    console.log('❌ تمت محاولة تحديث التوكن من قبل');\r\n  }\r\n\r\n  // إذا فشل التحديث أو تمت المحاولة من قبل\r\n  handleRefreshTokenFailure();\r\n  return Promise.reject(error);\r\n};\r\n\r\n// معالجة فشل تحديث التوكن\r\nexport const handleRefreshTokenFailure = () => {\r\n  console.log('🧹 حذف الجلسة بسبب فشل تحديث التوكن');\r\n  sessionManager.clearSession();\r\n  \r\n  console.log('✅ تم حذف الجلسة من الكوكيز');\r\n  \r\n  // إرسال حدث لحذف الجلسة\r\n  window.dispatchEvent(new CustomEvent('sessionExpired'));\r\n  \r\n  console.log('✅ تم إرسال حدث انتهاء الجلسة');\r\n};\r\n\r\n// معالجة أخطاء عامة\r\nexport const handleError = (error) => {\r\n  console.log('❌ خطأ في الطلب:', error);\r\n  console.log('🔍 تفاصيل الخطأ:', {\r\n    status: error.response?.status,\r\n    statusText: error.response?.statusText,\r\n    data: error.response?.data,\r\n    message: error.message\r\n  });\r\n  \r\n  if (error.response?.status === 401) {\r\n    console.log('🚫 خطأ 401 - غير مصرح، حذف الجلسة...');\r\n    handleRefreshTokenFailure();\r\n  }\r\n  \r\n  return Promise.reject(error);\r\n}; \r\n\r\n\r\n// هذا القديم قبل ما تنقلي مكان الملف من config\r\n// import { refreshToken } from '../API/Auth';\r\n// import { tokenManager, sessionManager } from './cookies';\r\n\r\n// // معالجة خطأ 401 (غير مصرح)\r\n// export const handleUnauthorizedError = async (error, originalRequest, axiosInstance) => {\r\n//   // إذا لم نكن قد حاولنا تحديث التوكن من قبل\r\n//   if (!originalRequest._retry) {\r\n//     originalRequest._retry = true;\r\n\r\n//     try {\r\n//       const refreshTokenValue = tokenManager.getRefreshToken();\r\n//       if (refreshTokenValue) {\r\n//         console.log('🔄 محاولة تحديث التوكن...');\r\n        \r\n//         // طلب تحديث التوكن\r\n//         const response = await refreshToken(refreshTokenValue);\r\n        \r\n//         // تحديث التوكنز في الكوكيز\r\n//         tokenManager.updateTokens(response.access, response.refresh);\r\n        \r\n//         // إعادة الطلب الأصلي مع التوكن الجديد\r\n//         originalRequest.headers.Authorization = `Bearer ${response.access}`;\r\n//         console.log('✅ تم تحديث التوكن وإعادة الطلب');\r\n        \r\n//         return axiosInstance(originalRequest);\r\n//       }\r\n//     } catch (refreshError) {\r\n//       console.log('❌ فشل تحديث التوكن:', refreshError);\r\n//       handleRefreshTokenFailure();\r\n//     }\r\n//   }\r\n\r\n//   // إذا فشل التحديث أو تمت المحاولة من قبل\r\n//   handleRefreshTokenFailure();\r\n//   return Promise.reject(error);\r\n// };\r\n\r\n// // معالجة فشل تحديث التوكن\r\n// export const handleRefreshTokenFailure = () => {\r\n//   console.log('🧹 حذف الجلسة بسبب فشل تحديث التوكن');\r\n//   sessionManager.clearSession();\r\n  \r\n//   // إرسال حدث لحذف الجلسة\r\n//   window.dispatchEvent(new CustomEvent('sessionExpired'));\r\n// };\r\n\r\n// // معالجة أخطاء عامة\r\n// export const handleError = (error) => {\r\n//   console.log('❌ خطأ في الطلب:', error);\r\n  \r\n//   if (error.response?.status === 401) {\r\n//     handleRefreshTokenFailure();\r\n//   }\r\n  \r\n//   return Promise.reject(error);\r\n// }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}