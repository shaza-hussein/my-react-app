{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shaza\\\\Desktop\\\\test for NO\\\\src\\\\Context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { sessionManager } from '../Config/cookies';\nimport { logoutUser } from '../API';\nimport { refreshToken } from '../API';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // التحقق من وجود توكن عند تحميل التطبيق مع محاولة التحديث\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        const session = sessionManager.restoreSession();\n        if (session) {\n          console.log('✅ تم استعادة الجلسة:', session);\n\n          // محاولة تحديث التوكن تلقائياً إذا كان منتهي الصلاحية\n          try {\n            console.log('🔄 محاولة تحديث التوكن تلقائياً...');\n            const response = await refreshToken(session.refreshToken);\n\n            // تحديث التوكنز في الكوكيز\n            sessionManager.saveSession({\n              access: response.access,\n              refresh: response.refresh,\n              user: session.userData\n            });\n            console.log('✅ تم تحديث التوكن بنجاح');\n\n            // تحديث حالة التطبيق\n            setUser(session.userData);\n            setIsAuthenticated(true);\n          } catch (refreshError) {\n            console.log('❌ فشل تحديث التوكن:', refreshError);\n\n            // إذا فشل التحديث، نحاول استخدام التوكن الحالي\n            console.log('🔄 محاولة استخدام التوكن الحالي...');\n\n            // يمكنك هنا إضافة طلب اختبار للتوكن الحالي إذا كنت تريد\n            // أو يمكنك مباشرة استخدام البيانات المحفوظة\n            setUser(session.userData);\n            setIsAuthenticated(true);\n          }\n        } else {\n          console.log('❌ لا توجد جلسة محفوظة');\n          setIsAuthenticated(false);\n          setUser(null);\n        }\n      } catch (error) {\n        console.log('❌ خطأ في تهيئة المصادقة:', error);\n        setIsAuthenticated(false);\n        setUser(null);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    initializeAuth();\n  }, []);\n\n  // الاستماع لحدث انتهاء الجلسة\n  useEffect(() => {\n    const handleSessionExpired = () => {\n      console.log('🔄 استقبال حدث انتهاء الجلسة');\n\n      // حذف الجلسة من الكوكيز\n      sessionManager.clearSession();\n\n      // إعادة تعيين الحالة\n      setUser(null);\n      setIsAuthenticated(false);\n\n      // التوجيه إلى صفحة تسجيل الدخول\n      window.location.href = '/login';\n    };\n    window.addEventListener('sessionExpired', handleSessionExpired);\n    return () => {\n      window.removeEventListener('sessionExpired', handleSessionExpired);\n    };\n  }, []);\n\n  // تسجيل الدخول\n  const login = response => {\n    console.log('🔄 بدء تسجيل الدخول:', response);\n\n    // حفظ الجلسة في الكوكيز\n    sessionManager.saveSession(response);\n\n    // استخراج بيانات المستخدم للـ Context\n    const userInfo = {\n      id: response.user.id,\n      first_name: response.user.first_name,\n      last_name: response.user.last_name,\n      is_active: response.user.is_active,\n      role: response.user.role\n    };\n    console.log('✅ تم حفظ الجلسة بنجاح:', {\n      userInfo,\n      hasSession: sessionManager.hasSession()\n    });\n\n    // تحديث حالة التطبيق\n    setUser(userInfo);\n    setIsAuthenticated(true);\n  };\n\n  // تسجيل الخروج\n  const logout = async () => {\n    console.log('🔄 بدء تسجيل الخروج');\n    try {\n      // إرسال طلب تسجيل الخروج للخادم\n      await logoutUser();\n      console.log('✅ تم تسجيل الخروج من الخادم');\n    } catch (error) {\n      var _error$response;\n      console.log('⚠️ فشل تسجيل الخروج من الخادم:', error);\n\n      // إذا كان الخطأ 401، فهذا يعني أن التوكن منتهي الصلاحية\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        console.log('🔑 التوكن منتهي الصلاحية، سيتم حذف الجلسة المحلية فقط');\n      } else {\n        console.log('❌ خطأ آخر في تسجيل الخروج:', error.message);\n      }\n      // نستمر في حذف الجلسة المحلية حتى لو فشل الطلب\n    }\n\n    // حذف الجلسة من الكوكيز (في جميع الحالات)\n    sessionManager.clearSession();\n    console.log('✅ تم حذف الجلسة المحلية بنجاح');\n\n    // إعادة تعيين الحالة\n    setUser(null);\n    setIsAuthenticated(false);\n\n    // التوجيه إلى صفحة تسجيل الدخول\n    window.location.href = '/login';\n  };\n\n  // تنظيف الجلسة (لحل المشاكل)\n  const clearSession = async () => {\n    console.log('🧹 تنظيف الجلسة');\n    try {\n      // محاولة تسجيل الخروج من الخادم\n      await logoutUser();\n      console.log('✅ تم تسجيل الخروج من الخادم');\n    } catch (error) {\n      console.log('⚠️ فشل تسجيل الخروج من الخادم:', error);\n      // نستمر في حذف الجلسة المحلية حتى لو فشل الطلب\n    }\n\n    // حذف الجلسة من الكوكيز\n    sessionManager.clearSession();\n    setUser(null);\n    setIsAuthenticated(false);\n\n    // التوجيه إلى صفحة تسجيل الدخول\n    window.location.href = '/login';\n  };\n\n  // الحصول على التوكن الحالي\n  const getAccessToken = () => {\n    var _sessionManager$resto;\n    const token = (_sessionManager$resto = sessionManager.restoreSession()) === null || _sessionManager$resto === void 0 ? void 0 : _sessionManager$resto.accessToken;\n    console.log('🔑 Access Token:', token ? 'موجود' : 'غير موجود');\n    return token;\n  };\n\n  // الحصول على refresh token\n  const getRefreshToken = () => {\n    var _sessionManager$resto2;\n    const token = (_sessionManager$resto2 = sessionManager.restoreSession()) === null || _sessionManager$resto2 === void 0 ? void 0 : _sessionManager$resto2.refreshToken;\n    console.log('🔄 Refresh Token:', token ? 'موجود' : 'غير موجود');\n    return token;\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    isLoading,\n    login,\n    logout,\n    clearSession,\n    getAccessToken,\n    getRefreshToken\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"qzV4SHsOsLlYp8SpLeogqS2VRgM=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","sessionManager","logoutUser","refreshToken","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","initializeAuth","session","restoreSession","console","log","response","saveSession","access","refresh","userData","refreshError","error","handleSessionExpired","clearSession","window","location","href","addEventListener","removeEventListener","login","userInfo","id","first_name","last_name","is_active","role","hasSession","logout","_error$response","status","message","getAccessToken","_sessionManager$resto","token","accessToken","getRefreshToken","_sessionManager$resto2","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shaza/Desktop/test for NO/src/Context/AuthContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\nimport { sessionManager } from '../Config/cookies';\nimport { logoutUser } from '../API';\nimport { refreshToken } from '../API';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // التحقق من وجود توكن عند تحميل التطبيق مع محاولة التحديث\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        const session = sessionManager.restoreSession();\n        \n        if (session) {\n          console.log('✅ تم استعادة الجلسة:', session);\n          \n          // محاولة تحديث التوكن تلقائياً إذا كان منتهي الصلاحية\n          try {\n            console.log('🔄 محاولة تحديث التوكن تلقائياً...');\n            const response = await refreshToken(session.refreshToken);\n            \n            // تحديث التوكنز في الكوكيز\n            sessionManager.saveSession({\n              access: response.access,\n              refresh: response.refresh,\n              user: session.userData\n            });\n            \n            console.log('✅ تم تحديث التوكن بنجاح');\n            \n            // تحديث حالة التطبيق\n            setUser(session.userData);\n            setIsAuthenticated(true);\n          } catch (refreshError) {\n            console.log('❌ فشل تحديث التوكن:', refreshError);\n            \n            // إذا فشل التحديث، نحاول استخدام التوكن الحالي\n            console.log('🔄 محاولة استخدام التوكن الحالي...');\n            \n            // يمكنك هنا إضافة طلب اختبار للتوكن الحالي إذا كنت تريد\n            // أو يمكنك مباشرة استخدام البيانات المحفوظة\n            setUser(session.userData);\n            setIsAuthenticated(true);\n          }\n        } else {\n          console.log('❌ لا توجد جلسة محفوظة');\n          setIsAuthenticated(false);\n          setUser(null);\n        }\n      } catch (error) {\n        console.log('❌ خطأ في تهيئة المصادقة:', error);\n        setIsAuthenticated(false);\n        setUser(null);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    initializeAuth();\n  }, []);\n\n  // الاستماع لحدث انتهاء الجلسة\n  useEffect(() => {\n    const handleSessionExpired = () => {\n      console.log('🔄 استقبال حدث انتهاء الجلسة');\n      \n      // حذف الجلسة من الكوكيز\n      sessionManager.clearSession();\n      \n      // إعادة تعيين الحالة\n      setUser(null);\n      setIsAuthenticated(false);\n      \n      // التوجيه إلى صفحة تسجيل الدخول\n      window.location.href = '/login';\n    };\n\n    window.addEventListener('sessionExpired', handleSessionExpired);\n\n    return () => {\n      window.removeEventListener('sessionExpired', handleSessionExpired);\n    };\n  }, []);\n\n  // تسجيل الدخول\n  const login = (response) => {\n    console.log('🔄 بدء تسجيل الدخول:', response);\n    \n    // حفظ الجلسة في الكوكيز\n    sessionManager.saveSession(response);\n    \n    // استخراج بيانات المستخدم للـ Context\n    const userInfo = {\n      id: response.user.id,\n      first_name: response.user.first_name,\n      last_name: response.user.last_name,\n      is_active: response.user.is_active,\n      role: response.user.role\n    };\n\n    console.log('✅ تم حفظ الجلسة بنجاح:', {\n      userInfo,\n      hasSession: sessionManager.hasSession()\n    });\n\n    // تحديث حالة التطبيق\n    setUser(userInfo);\n    setIsAuthenticated(true);\n  };\n\n  // تسجيل الخروج\n  const logout = async () => {\n    console.log('🔄 بدء تسجيل الخروج');\n    \n    try {\n      // إرسال طلب تسجيل الخروج للخادم\n      await logoutUser();\n      console.log('✅ تم تسجيل الخروج من الخادم');\n    } catch (error) {\n      console.log('⚠️ فشل تسجيل الخروج من الخادم:', error);\n      \n      // إذا كان الخطأ 401، فهذا يعني أن التوكن منتهي الصلاحية\n      if (error.response?.status === 401) {\n        console.log('🔑 التوكن منتهي الصلاحية، سيتم حذف الجلسة المحلية فقط');\n      } else {\n        console.log('❌ خطأ آخر في تسجيل الخروج:', error.message);\n      }\n      // نستمر في حذف الجلسة المحلية حتى لو فشل الطلب\n    }\n    \n    // حذف الجلسة من الكوكيز (في جميع الحالات)\n    sessionManager.clearSession();\n    \n    console.log('✅ تم حذف الجلسة المحلية بنجاح');\n    \n    // إعادة تعيين الحالة\n    setUser(null);\n    setIsAuthenticated(false);\n    \n    // التوجيه إلى صفحة تسجيل الدخول\n    window.location.href = '/login';\n  };\n\n  // تنظيف الجلسة (لحل المشاكل)\n  const clearSession = async () => {\n    console.log('🧹 تنظيف الجلسة');\n    \n    try {\n      // محاولة تسجيل الخروج من الخادم\n      await logoutUser();\n      console.log('✅ تم تسجيل الخروج من الخادم');\n    } catch (error) {\n      console.log('⚠️ فشل تسجيل الخروج من الخادم:', error);\n      // نستمر في حذف الجلسة المحلية حتى لو فشل الطلب\n    }\n    \n    // حذف الجلسة من الكوكيز\n    sessionManager.clearSession();\n    setUser(null);\n    setIsAuthenticated(false);\n    \n    // التوجيه إلى صفحة تسجيل الدخول\n    window.location.href = '/login';\n  };\n\n  // الحصول على التوكن الحالي\n  const getAccessToken = () => {\n    const token = sessionManager.restoreSession()?.accessToken;\n    console.log('🔑 Access Token:', token ? 'موجود' : 'غير موجود');\n    return token;\n  };\n\n  // الحصول على refresh token\n  const getRefreshToken = () => {\n    const token = sessionManager.restoreSession()?.refreshToken;\n    console.log('🔄 Refresh Token:', token ? 'موجود' : 'غير موجود');\n    return token;\n  };\n\n  const value = {\n    user,\n    isAuthenticated,\n    isLoading,\n    login,\n    logout,\n    clearSession,\n    getAccessToken,\n    getRefreshToken\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}