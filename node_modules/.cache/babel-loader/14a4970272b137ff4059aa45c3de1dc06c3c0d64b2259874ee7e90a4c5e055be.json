{"ast":null,"code":"import axios from 'axios';\nimport { tokenManager } from './cookies';\nimport { refreshToken } from '../API/Auth';\nimport { baseURL } from '../API/Api';\n\n// axios للطلبات العامة (بدون توكن)\nexport const publicAxios = axios.create({\n  baseURL: baseURL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// axios للطلبات المحمية (مع توكن)\nconst axiosInstance = axios.create({\n  baseURL: baseURL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// إضافة التوكن تلقائياً لكل طلب\naxiosInstance.interceptors.request.use(config => {\n  const token = tokenManager.getAccessToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n    console.log('🔑 إضافة التوكن للطلب:', config.url);\n  } else {\n    console.log('⚠️ لا يوجد توكن للطلب:', config.url);\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// معالجة استجابة الطلبات\naxiosInstance.interceptors.response.use(response => {\n  console.log('✅ نجح الطلب:', response.config.url);\n  return response;\n}, async error => {\n  var _error$config, _error$response, _error$response2;\n  console.log('❌ فشل الطلب:', (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url, (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status);\n  const originalRequest = error.config;\n\n  // إذا كان الخطأ 401 ولم نكن قد حاولنا تحديث التوكن من قبل\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const refreshTokenValue = tokenManager.getRefreshToken();\n      if (refreshTokenValue) {\n        console.log('🔄 محاولة تحديث التوكن...');\n\n        // طلب تحديث التوكن\n        const response = await refreshToken(refreshTokenValue);\n\n        // تحديث التوكنز في الكوكيز\n        tokenManager.updateTokens(response.access, response.refresh);\n\n        // إعادة الطلب الأصلي مع التوكن الجديد\n        originalRequest.headers.Authorization = `Bearer ${response.access}`;\n        console.log('✅ تم تحديث التوكن وإعادة الطلب');\n        return axiosInstance(originalRequest);\n      }\n    } catch (refreshError) {\n      console.log('❌ فشل تحديث التوكن:', refreshError);\n\n      // إذا فشل تحديث التوكن، احذف الجلسة وانتقل لصفحة تسجيل الدخول\n      const {\n        sessionManager\n      } = require('./cookies');\n      sessionManager.clearSession();\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","tokenManager","refreshToken","baseURL","publicAxios","create","headers","axiosInstance","interceptors","request","use","config","token","getAccessToken","Authorization","console","log","url","error","Promise","reject","response","_error$config","_error$response","_error$response2","status","originalRequest","_retry","refreshTokenValue","getRefreshToken","updateTokens","access","refresh","refreshError","sessionManager","require","clearSession","window","location","href"],"sources":["C:/Users/shaza/Desktop/test for NO/src/Config/axios.js"],"sourcesContent":["import axios from 'axios';\r\nimport { tokenManager } from './cookies';\r\nimport { refreshToken } from '../API/Auth';\r\nimport {\r\n  baseURL\r\n} from '../API/Api';\r\n\r\n// axios للطلبات العامة (بدون توكن)\r\nexport const publicAxios = axios.create({\r\n  baseURL: baseURL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// axios للطلبات المحمية (مع توكن)\r\nconst axiosInstance = axios.create({\r\n  baseURL: baseURL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// إضافة التوكن تلقائياً لكل طلب\r\naxiosInstance.interceptors.request.use(\r\n  (config) => {\r\n    const token = tokenManager.getAccessToken();\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n      console.log('🔑 إضافة التوكن للطلب:', config.url);\r\n    } else {\r\n      console.log('⚠️ لا يوجد توكن للطلب:', config.url);\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// معالجة استجابة الطلبات\r\naxiosInstance.interceptors.response.use(\r\n  (response) => {\r\n    console.log('✅ نجح الطلب:', response.config.url);\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    console.log('❌ فشل الطلب:', error.config?.url, error.response?.status);\r\n    \r\n    const originalRequest = error.config;\r\n\r\n    // إذا كان الخطأ 401 ولم نكن قد حاولنا تحديث التوكن من قبل\r\n    if (error.response?.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n\r\n      try {\r\n        const refreshTokenValue = tokenManager.getRefreshToken();\r\n        if (refreshTokenValue) {\r\n          console.log('🔄 محاولة تحديث التوكن...');\r\n          \r\n          // طلب تحديث التوكن\r\n          const response = await refreshToken(refreshTokenValue);\r\n          \r\n          // تحديث التوكنز في الكوكيز\r\n          tokenManager.updateTokens(response.access, response.refresh);\r\n          \r\n          // إعادة الطلب الأصلي مع التوكن الجديد\r\n          originalRequest.headers.Authorization = `Bearer ${response.access}`;\r\n          console.log('✅ تم تحديث التوكن وإعادة الطلب');\r\n          \r\n          return axiosInstance(originalRequest);\r\n        }\r\n      } catch (refreshError) {\r\n        console.log('❌ فشل تحديث التوكن:', refreshError);\r\n        \r\n        // إذا فشل تحديث التوكن، احذف الجلسة وانتقل لصفحة تسجيل الدخول\r\n        const { sessionManager } = require('./cookies');\r\n        sessionManager.clearSession();\r\n        window.location.href = '/login';\r\n      }\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default axiosInstance; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}