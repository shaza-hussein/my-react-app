{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { sendOTP } from '../API';\nimport { handlePhoneInputKeyPress } from '../Utils/validateForm';\nexport default function useForgetPasswordForm() {\n  _s();\n  const [phone, setPhone] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n  const handlePhoneChange = e => {\n    setPhone(e.target.value);\n    // مسح الأخطاء عند التغيير\n    if (error) setError(\"\");\n    if (success) setSuccess(\"\");\n  };\n  const handlePhoneKeyPress = e => {\n    handlePhoneInputKeyPress(e, e.target.value);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // التحقق من إدخال رقم الهاتف\n    if (!phone.trim()) {\n      setError(\"يرجى إدخال رقم الهاتف\");\n      return;\n    }\n    setLoading(true);\n    setError(\"\");\n    setSuccess(\"\");\n    try {\n      await sendOTP({\n        phone_number: phone,\n        purpose: \"reset_password\"\n      });\n      setSuccess(\"تم إرسال رمز التحقق بنجاح! سيتم تحويلك خلال ثوانٍ...\");\n\n      // التوجيه إلى صفحة التحقق من OTP\n      setTimeout(() => {\n        navigate(\"/verify-otp\", {\n          state: {\n            formData: {\n              phone_number: phone,\n              purpose: 'reset_password'\n            }\n          }\n        });\n      }, 1000);\n    } catch (error) {\n      let msg = \"فشل إرسال رمز OTP. تحقق من الرقم أو الشبكة.\";\n      if (error.response && error.response.data) {\n        if (typeof error.response.data === \"string\") {\n          msg = error.response.data;\n        } else if (typeof error.response.data === \"object\") {\n          msg = Object.values(error.response.data).flat().join(\"، \");\n        }\n      }\n      setError(msg);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const clearError = () => {\n    setError(\"\");\n  };\n  const clearSuccess = () => {\n    setSuccess(\"\");\n  };\n  return {\n    phone,\n    error,\n    success,\n    loading,\n    handlePhoneChange,\n    handlePhoneKeyPress,\n    handleSubmit,\n    clearError,\n    clearSuccess\n  };\n}\n_s(useForgetPasswordForm, \"BYRAUbZncXvqIzSS9v4ATRVeC1E=\", false, function () {\n  return [useNavigate];\n});","map":{"version":3,"names":["useState","useNavigate","sendOTP","handlePhoneInputKeyPress","useForgetPasswordForm","_s","phone","setPhone","error","setError","success","setSuccess","loading","setLoading","navigate","handlePhoneChange","e","target","value","handlePhoneKeyPress","handleSubmit","preventDefault","trim","phone_number","purpose","setTimeout","state","formData","msg","response","data","Object","values","flat","join","clearError","clearSuccess"],"sources":["C:/Users/shaza/Desktop/test for NO/src/Hooks/useForgetPasswordForm.js"],"sourcesContent":["import { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { sendOTP } from '../API';\r\nimport { handlePhoneInputKeyPress } from '../Utils/validateForm';\r\n\r\nexport default function useForgetPasswordForm() {\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [success, setSuccess] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const handlePhoneChange = (e) => {\r\n    setPhone(e.target.value);\r\n    // مسح الأخطاء عند التغيير\r\n    if (error) setError(\"\");\r\n    if (success) setSuccess(\"\");\r\n  };\r\n\r\n  const handlePhoneKeyPress = (e) => {\r\n    handlePhoneInputKeyPress(e, e.target.value);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    // التحقق من إدخال رقم الهاتف\r\n    if (!phone.trim()) {\r\n      setError(\"يرجى إدخال رقم الهاتف\");\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(\"\");\r\n    setSuccess(\"\");\r\n    \r\n    try {\r\n      await sendOTP({ \r\n        phone_number: phone, \r\n        purpose: \"reset_password\" \r\n      });\r\n      \r\n      setSuccess(\"تم إرسال رمز التحقق بنجاح! سيتم تحويلك خلال ثوانٍ...\");\r\n      \r\n      // التوجيه إلى صفحة التحقق من OTP\r\n      setTimeout(() => {\r\n        navigate(\"/verify-otp\", { \r\n          state: { \r\n            formData: { \r\n              phone_number: phone, \r\n              purpose: 'reset_password' \r\n            } \r\n          } \r\n        });\r\n      }, 1000);\r\n      \r\n    } catch (error) {\r\n      let msg = \"فشل إرسال رمز OTP. تحقق من الرقم أو الشبكة.\";\r\n      \r\n      if (error.response && error.response.data) {\r\n        if (typeof error.response.data === \"string\") {\r\n          msg = error.response.data;\r\n        } else if (typeof error.response.data === \"object\") {\r\n          msg = Object.values(error.response.data).flat().join(\"، \");\r\n        }\r\n      }\r\n      \r\n      setError(msg);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const clearError = () => {\r\n    setError(\"\");\r\n  };\r\n\r\n  const clearSuccess = () => {\r\n    setSuccess(\"\");\r\n  };\r\n\r\n  return {\r\n    phone,\r\n    error,\r\n    success,\r\n    loading,\r\n    handlePhoneChange,\r\n    handlePhoneKeyPress,\r\n    handleSubmit,\r\n    clearError,\r\n    clearSuccess\r\n  };\r\n} "],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,OAAO,QAAQ,QAAQ;AAChC,SAASC,wBAAwB,QAAQ,uBAAuB;AAEhE,eAAe,SAASC,qBAAqBA,CAAA,EAAG;EAAAC,EAAA;EAC9C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAMc,QAAQ,GAAGb,WAAW,CAAC,CAAC;EAE9B,MAAMc,iBAAiB,GAAIC,CAAC,IAAK;IAC/BT,QAAQ,CAACS,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;IACxB;IACA,IAAIV,KAAK,EAAEC,QAAQ,CAAC,EAAE,CAAC;IACvB,IAAIC,OAAO,EAAEC,UAAU,CAAC,EAAE,CAAC;EAC7B,CAAC;EAED,MAAMQ,mBAAmB,GAAIH,CAAC,IAAK;IACjCb,wBAAwB,CAACa,CAAC,EAAEA,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC7C,CAAC;EAED,MAAME,YAAY,GAAG,MAAOJ,CAAC,IAAK;IAChCA,CAAC,CAACK,cAAc,CAAC,CAAC;;IAElB;IACA,IAAI,CAACf,KAAK,CAACgB,IAAI,CAAC,CAAC,EAAE;MACjBb,QAAQ,CAAC,uBAAuB,CAAC;MACjC;IACF;IAEAI,UAAU,CAAC,IAAI,CAAC;IAChBJ,QAAQ,CAAC,EAAE,CAAC;IACZE,UAAU,CAAC,EAAE,CAAC;IAEd,IAAI;MACF,MAAMT,OAAO,CAAC;QACZqB,YAAY,EAAEjB,KAAK;QACnBkB,OAAO,EAAE;MACX,CAAC,CAAC;MAEFb,UAAU,CAAC,sDAAsD,CAAC;;MAElE;MACAc,UAAU,CAAC,MAAM;QACfX,QAAQ,CAAC,aAAa,EAAE;UACtBY,KAAK,EAAE;YACLC,QAAQ,EAAE;cACRJ,YAAY,EAAEjB,KAAK;cACnBkB,OAAO,EAAE;YACX;UACF;QACF,CAAC,CAAC;MACJ,CAAC,EAAE,IAAI,CAAC;IAEV,CAAC,CAAC,OAAOhB,KAAK,EAAE;MACd,IAAIoB,GAAG,GAAG,6CAA6C;MAEvD,IAAIpB,KAAK,CAACqB,QAAQ,IAAIrB,KAAK,CAACqB,QAAQ,CAACC,IAAI,EAAE;QACzC,IAAI,OAAOtB,KAAK,CAACqB,QAAQ,CAACC,IAAI,KAAK,QAAQ,EAAE;UAC3CF,GAAG,GAAGpB,KAAK,CAACqB,QAAQ,CAACC,IAAI;QAC3B,CAAC,MAAM,IAAI,OAAOtB,KAAK,CAACqB,QAAQ,CAACC,IAAI,KAAK,QAAQ,EAAE;UAClDF,GAAG,GAAGG,MAAM,CAACC,MAAM,CAACxB,KAAK,CAACqB,QAAQ,CAACC,IAAI,CAAC,CAACG,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;QAC5D;MACF;MAEAzB,QAAQ,CAACmB,GAAG,CAAC;IACf,CAAC,SAAS;MACRf,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMsB,UAAU,GAAGA,CAAA,KAAM;IACvB1B,QAAQ,CAAC,EAAE,CAAC;EACd,CAAC;EAED,MAAM2B,YAAY,GAAGA,CAAA,KAAM;IACzBzB,UAAU,CAAC,EAAE,CAAC;EAChB,CAAC;EAED,OAAO;IACLL,KAAK;IACLE,KAAK;IACLE,OAAO;IACPE,OAAO;IACPG,iBAAiB;IACjBI,mBAAmB;IACnBC,YAAY;IACZe,UAAU;IACVC;EACF,CAAC;AACH;AAAC/B,EAAA,CAvFuBD,qBAAqB;EAAA,QAK1BH,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}